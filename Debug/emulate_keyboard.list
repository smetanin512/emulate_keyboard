
emulate_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081fc  080081fc  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  080081fc  080081fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008204  08008204  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800820c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  200001cc  080083d8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  080083d8  00020c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d665  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003925  00000000  00000000  0003d861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00041188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00042680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e16  00000000  00000000  00043a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001844f  00000000  00000000  0006d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7667  00000000  00000000  00085c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d2ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005878  00000000  00000000  0017d340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001cc 	.word	0x200001cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800804c 	.word	0x0800804c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d0 	.word	0x200001d0
 80001c4:	0800804c 	.word	0x0800804c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <pressKey>:
char inputBuf[INPUT_SIZE];
int inputPos = 0;

extern USBD_HandleTypeDef hUsbDeviceFS;

void pressKey(uint8_t key, int times) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < times; i++) {
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e01e      	b.n	8000510 <pressKey+0x50>
    uint8_t report[8] = {};
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
    report[2] = key; // btn pressed
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	73bb      	strb	r3, [r7, #14]
    USBD_HID_SendReport(&hUsbDeviceFS, report, sizeof (report));
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2208      	movs	r2, #8
 80004e4:	4619      	mov	r1, r3
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <pressKey+0x64>)
 80004e8:	f005 fd88 	bl	8005ffc <USBD_HID_SendReport>
    HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	; 0x32
 80004ee:	f000 fb17 	bl	8000b20 <HAL_Delay>

    report[2] = 0x00; // Nothing pressed
 80004f2:	2300      	movs	r3, #0
 80004f4:	73bb      	strb	r3, [r7, #14]
    USBD_HID_SendReport(&hUsbDeviceFS, report, sizeof(report));
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2208      	movs	r2, #8
 80004fc:	4619      	mov	r1, r3
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <pressKey+0x64>)
 8000500:	f005 fd7c 	bl	8005ffc <USBD_HID_SendReport>
    HAL_Delay(50);
 8000504:	2032      	movs	r0, #50	; 0x32
 8000506:	f000 fb0b 	bl	8000b20 <HAL_Delay>
  for (int i = 0; i < times; i++) {
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbdc      	blt.n	80004d2 <pressKey+0x12>
  }
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000358 	.word	0x20000358

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fab7 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f875 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f8f7 	bl	8000728 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053a:	f006 ff4f 	bl	80073dc <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f8c3 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // Read UART
	      inputPos = 0;
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <main+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]

	      do {
	        HAL_UART_Receive(&huart2, (uint8_t *)&inputBuf[inputPos], 1, HAL_MAX_DELAY);
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <main+0xe8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a31      	ldr	r2, [pc, #196]	; (8000614 <main+0xec>)
 800054e:	1899      	adds	r1, r3, r2
 8000550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000554:	2201      	movs	r2, #1
 8000556:	4830      	ldr	r0, [pc, #192]	; (8000618 <main+0xf0>)
 8000558:	f003 fd1c 	bl	8003f94 <HAL_UART_Receive>
	        HAL_UART_Transmit(&huart2, (uint8_t *)&inputBuf[inputPos], 1, HAL_MAX_DELAY);
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <main+0xe8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <main+0xec>)
 8000562:	1899      	adds	r1, r3, r2
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000568:	2201      	movs	r2, #1
 800056a:	482b      	ldr	r0, [pc, #172]	; (8000618 <main+0xf0>)
 800056c:	f003 fc7e 	bl	8003e6c <HAL_UART_Transmit>
	        inputPos++;
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <main+0xe8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a26      	ldr	r2, [pc, #152]	; (8000610 <main+0xe8>)
 8000578:	6013      	str	r3, [r2, #0]
	      } while (inputPos != INPUT_SIZE - 1 && inputBuf[inputPos - 1] != '\r');
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <main+0xe8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b7f      	cmp	r3, #127	; 0x7f
 8000580:	d006      	beq.n	8000590 <main+0x68>
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <main+0xe8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <main+0xec>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	2b0d      	cmp	r3, #13
 800058e:	d1db      	bne.n	8000548 <main+0x20>

	      inputBuf[inputPos] = '\0';
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <main+0xe8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <main+0xec>)
 8000596:	2100      	movs	r1, #0
 8000598:	54d1      	strb	r1, [r2, r3]
	      HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059e:	2201      	movs	r2, #1
 80005a0:	491e      	ldr	r1, [pc, #120]	; (800061c <main+0xf4>)
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0xf0>)
 80005a4:	f003 fc62 	bl	8003e6c <HAL_UART_Transmit>

	      HAL_Delay(2000);
 80005a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ac:	f000 fab8 	bl	8000b20 <HAL_Delay>

	      char *endptr = NULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
	      int action = strtol(inputBuf, &endptr, 10);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	220a      	movs	r2, #10
 80005b8:	4619      	mov	r1, r3
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <main+0xec>)
 80005bc:	f007 fd3c 	bl	8008038 <strtol>
 80005c0:	60f8      	str	r0, [r7, #12]
	      int times = strtol(endptr, NULL, 10);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	220a      	movs	r2, #10
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f007 fd35 	bl	8008038 <strtol>
 80005ce:	60b8      	str	r0, [r7, #8]

	      if (action == 0) {
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d104      	bne.n	80005e0 <main+0xb8>
	        // Zoom +
	        pressKey(KEY_ZOOM_INC, times);
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	2062      	movs	r0, #98	; 0x62
 80005da:	f7ff ff71 	bl	80004c0 <pressKey>
 80005de:	e7b0      	b.n	8000542 <main+0x1a>
	      } else if (action == 1) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d104      	bne.n	80005f0 <main+0xc8>
	        // Zoom -
	        pressKey(KEY_ZOOM_DEC, times);
 80005e6:	68b9      	ldr	r1, [r7, #8]
 80005e8:	2059      	movs	r0, #89	; 0x59
 80005ea:	f7ff ff69 	bl	80004c0 <pressKey>
 80005ee:	e7a8      	b.n	8000542 <main+0x1a>
	      } else if (action == 2) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d104      	bne.n	8000600 <main+0xd8>
	        // Focus +
	        pressKey(KEY_FOCUS_INC, times);
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f7ff ff61 	bl	80004c0 <pressKey>
 80005fe:	e7a0      	b.n	8000542 <main+0x1a>
	      } else if (action == 3) {
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b03      	cmp	r3, #3
 8000604:	d19d      	bne.n	8000542 <main+0x1a>
	        // Focus -
	        pressKey(KEY_FOCUS_DEC, times);
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	205b      	movs	r0, #91	; 0x5b
 800060a:	f7ff ff59 	bl	80004c0 <pressKey>
  {
 800060e:	e798      	b.n	8000542 <main+0x1a>
 8000610:	200001e8 	.word	0x200001e8
 8000614:	20000204 	.word	0x20000204
 8000618:	20000284 	.word	0x20000284
 800061c:	08008064 	.word	0x08008064

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	; 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	; 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fc76 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000646:	f001 fdb1 	bl	80021ac <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 f8ac 	bl	80007ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000654:	2310      	movs	r3, #16
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000670:	2314      	movs	r3, #20
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fdf7 	bl	8002278 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000690:	f000 f88c 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f9c8 	bl	8002a44 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ba:	f000 f877 	bl	80007ac <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	; 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_USART2_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART2_UART_Init+0x58>)
 800070c:	f003 fb60 	bl	8003dd0 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f849 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000284 	.word	0x20000284
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_GPIO_Init+0x5c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <MX_GPIO_Init+0x5c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0x5c>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x5c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f9a1 	bl	8000ae0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40012c00 	.word	0x40012c00

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	; 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2288      	movs	r2, #136	; 0x88
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fb7d 	bl	8007f20 <memset>
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0xb0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13a      	bne.n	80008a6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fb39 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f7ff ffb0 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6593      	str	r3, [r2, #88]	; 0x58
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 80008a2:	f000 fa43 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	37b0      	adds	r7, #176	; 0xb0
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000c00 	.word	0x48000c00

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2019      	movs	r0, #25
 80008d2:	f000 fa01 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008d6:	2019      	movs	r0, #25
 80008d8:	f000 fa1a 	bl	8000d10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_InitTick+0x9c>)
 80008de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_InitTick+0x9c>)
 80008e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008e6:	6613      	str	r3, [r2, #96]	; 0x60
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_InitTick+0x9c>)
 80008ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fa46 	bl	8002d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000904:	f002 fa2e 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8000908:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_InitTick+0xa0>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_InitTick+0xa4>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <HAL_InitTick+0xa8>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_InitTick+0xa4>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_InitTick+0xa4>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_InitTick+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_InitTick+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <HAL_InitTick+0xa4>)
 800093a:	f002 ff77 	bl	800382c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_InitTick+0xa4>)
 8000946:	f002 ffd3 	bl	80038f0 <HAL_TIM_Base_Start_IT>
 800094a:	4603      	mov	r3, r0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000308 	.word	0x20000308
 8000964:	40012c00 	.word	0x40012c00

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009c6:	f003 f803 	bl	80039d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000308 	.word	0x20000308

080009d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <OTG_FS_IRQHandler+0x10>)
 80009da:	f000 fca4 	bl	8001326 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000828 	.word	0x20000828

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <SystemInit+0x5c>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <SystemInit+0x5c>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <SystemInit+0x60>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <SystemInit+0x60>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <SystemInit+0x60>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <SystemInit+0x60>)
 8000a14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <SystemInit+0x60>)
 8000a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <SystemInit+0x60>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <SystemInit+0x60>)
 8000a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SystemInit+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40021000 	.word	0x40021000

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ffca 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a60:	480a      	ldr	r0, [pc, #40]	; (8000a8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
	ldr	r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <LoopForever+0x16>)
	cmp	r2, r3
 8000a76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f007 fa2d 	bl	8007ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fd53 	bl	8000528 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a88:	0800820c 	.word	0x0800820c
	ldr	r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a90:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8000a94:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8000a98:	20000c30 	.word	0x20000c30

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_Init+0x3c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_Init+0x3c>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f903 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abc:	200f      	movs	r0, #15
 8000abe:	f7ff fefd 	bl	80008bc <HAL_InitTick>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	e001      	b.n	8000ad2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ace:	f7ff fe73 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000354 	.word	0x20000354

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000354 	.word	0x20000354

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e17f      	b.n	800103c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8171 	beq.w	8001036 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d118      	bne.n	8000e14 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x128>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ac 	beq.w	8001036 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b5f      	ldr	r3, [pc, #380]	; (800105c <HAL_GPIO_Init+0x330>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a5e      	ldr	r2, [pc, #376]	; (800105c <HAL_GPIO_Init+0x330>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HAL_GPIO_Init+0x330>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef6:	4a5a      	ldr	r2, [pc, #360]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f20:	d025      	beq.n	8000f6e <HAL_GPIO_Init+0x242>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x338>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01f      	beq.n	8000f6a <HAL_GPIO_Init+0x23e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_GPIO_Init+0x33c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4d      	ldr	r2, [pc, #308]	; (800106c <HAL_GPIO_Init+0x340>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x236>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <HAL_GPIO_Init+0x344>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x232>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <HAL_GPIO_Init+0x348>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <HAL_GPIO_Init+0x34c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x22a>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00c      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00a      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x244>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f80:	4937      	ldr	r1, [pc, #220]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_GPIO_Init+0x350>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_GPIO_Init+0x350>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_GPIO_Init+0x350>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_GPIO_Init+0x350>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_GPIO_Init+0x350>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa22 f303 	lsr.w	r3, r2, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f47f ae78 	bne.w	8000d3c <HAL_GPIO_Init+0x10>
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	48001400 	.word	0x48001400
 8001078:	48001800 	.word	0x48001800
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	b08f      	sub	sp, #60	; 0x3c
 8001084:	af0a      	add	r7, sp, #40	; 0x28
 8001086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e116      	b.n	80012c0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d106      	bne.n	80010b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f006 fadd 	bl	800766c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fcfc 	bl	8004ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	687e      	ldr	r6, [r7, #4]
 80010de:	466d      	mov	r5, sp
 80010e0:	f106 0410 	add.w	r4, r6, #16
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f4:	1d33      	adds	r3, r6, #4
 80010f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f003 fc0e 	bl	800491a <USB_CoreInit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0d7      	b.n	80012c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fcea 	bl	8004af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e04a      	b.n	80011b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	333d      	adds	r3, #61	; 0x3d
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	333c      	adds	r3, #60	; 0x3c
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	b298      	uxth	r0, r3
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	3342      	adds	r3, #66	; 0x42
 800115e:	4602      	mov	r2, r0
 8001160:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	333f      	adds	r3, #63	; 0x3f
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3344      	adds	r3, #68	; 0x44
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	3348      	adds	r3, #72	; 0x48
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3350      	adds	r3, #80	; 0x50
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	3301      	adds	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3af      	bcc.n	8001122 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e044      	b.n	8001252 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	1a9b      	subs	r3, r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3b5      	bcc.n	80011c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	687e      	ldr	r6, [r7, #4]
 8001264:	466d      	mov	r5, sp
 8001266:	f106 0410 	add.w	r4, r6, #16
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001276:	e885 0003 	stmia.w	r5, {r0, r1}
 800127a:	1d33      	adds	r3, r6, #4
 800127c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f003 fc60 	bl	8004b44 <USB_DevInit>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e014      	b.n	80012c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d102      	bne.n	80012b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 ff4a 	bl	8002148 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fbe2 	bl	8005a82 <USB_DevDisconnect>

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_PCD_Start+0x1c>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e01c      	b.n	800131e <HAL_PCD_Start+0x56>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fbd1 	bl	8004aac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f004 fb96 	bl	8005a40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001326:	b590      	push	{r4, r7, lr}
 8001328:	b08d      	sub	sp, #52	; 0x34
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fc54 	bl	8005bea <USB_GetMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 838f 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fbb8 	bl	8005ac4 <USB_ReadInterrupts>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8385 	beq.w	8001a66 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fbaf 	bl	8005ac4 <USB_ReadInterrupts>
 8001366:	4603      	mov	r3, r0
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b02      	cmp	r3, #2
 800136e:	d107      	bne.n	8001380 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f002 0202 	and.w	r2, r2, #2
 800137e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fb9d 	bl	8005ac4 <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b10      	cmp	r3, #16
 8001392:	d161      	bne.n	8001458 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0210 	bic.w	r2, r2, #16
 80013a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 020f 	and.w	r2, r3, #15
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	0c5b      	lsrs	r3, r3, #17
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d124      	bne.n	800141a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d035      	beq.n	8001448 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	6a38      	ldr	r0, [r7, #32]
 80013f0:	f004 fa03 	bl	80057fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001400:	441a      	add	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001412:	441a      	add	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	e016      	b.n	8001448 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	0c5b      	lsrs	r3, r3, #17
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	2b06      	cmp	r3, #6
 8001424:	d110      	bne.n	8001448 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800142c:	2208      	movs	r2, #8
 800142e:	4619      	mov	r1, r3
 8001430:	6a38      	ldr	r0, [r7, #32]
 8001432:	f004 f9e2 	bl	80057fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001442:	441a      	add	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0210 	orr.w	r2, r2, #16
 8001456:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f004 fb31 	bl	8005ac4 <USB_ReadInterrupts>
 8001462:	4603      	mov	r3, r0
 8001464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001468:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800146c:	d16e      	bne.n	800154c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fb37 	bl	8005aea <USB_ReadDevAllOutEpInterrupt>
 800147c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800147e:	e062      	b.n	8001546 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d057      	beq.n	800153a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f004 fb5c 	bl	8005b52 <USB_ReadDevOutEPInterrupt>
 800149a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	2301      	movs	r3, #1
 80014b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fd6a 	bl	8001f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2308      	movs	r3, #8
 80014da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fda6 	bl	8002030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fa:	461a      	mov	r2, r3
 80014fc:	2310      	movs	r3, #16
 80014fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001516:	461a      	mov	r2, r3
 8001518:	2320      	movs	r3, #32
 800151a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001532:	461a      	mov	r2, r3
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	2b00      	cmp	r3, #0
 800154a:	d199      	bne.n	8001480 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fab7 	bl	8005ac4 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001560:	f040 8087 	bne.w	8001672 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fad8 	bl	8005b1e <USB_ReadDevAllInEpInterrupt>
 800156e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001574:	e07a      	b.n	800166c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d06f      	beq.n	8001660 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f004 faff 	bl	8005b8e <USB_ReadDevInEPInterrupt>
 8001590:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	2201      	movs	r2, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69f9      	ldr	r1, [r7, #28]
 80015b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015bc:	4013      	ands	r3, r2
 80015be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2301      	movs	r3, #1
 80015d0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f006 f906 	bl	80077ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f4:	461a      	mov	r2, r3
 80015f6:	2308      	movs	r3, #8
 80015f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001610:	461a      	mov	r2, r3
 8001612:	2310      	movs	r3, #16
 8001614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162c:	461a      	mov	r2, r3
 800162e:	2340      	movs	r3, #64	; 0x40
 8001630:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001648:	461a      	mov	r2, r3
 800164a:	2302      	movs	r3, #2
 800164c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fc11 	bl	8001e82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	3301      	adds	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	d181      	bne.n	8001576 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fa24 	bl	8005ac4 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001686:	d122      	bne.n	80016ce <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f006 fb9f 	bl	8007df4 <HAL_PCDEx_LPM_Callback>
 80016b6:	e002      	b.n	80016be <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f006 f903 	bl	80078c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 f9f6 	bl	8005ac4 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e2:	d112      	bne.n	800170a <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f006 f8bf 	bl	8007878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001708:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f9d8 	bl	8005ac4 <USB_ReadInterrupts>
 8001714:	4603      	mov	r3, r0
 8001716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800171a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800171e:	d121      	bne.n	8001764 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800172e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d111      	bne.n	800175e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	f003 020f 	and.w	r2, r3, #15
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001754:	2101      	movs	r1, #1
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f006 fb4c 	bl	8007df4 <HAL_PCDEx_LPM_Callback>
 800175c:	e002      	b.n	8001764 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f006 f88a 	bl	8007878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f004 f9ab 	bl	8005ac4 <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001778:	f040 80c5 	bne.w	8001906 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2110      	movs	r1, #16
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fb20 	bl	8004ddc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a0:	e056      	b.n	8001850 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ae:	461a      	mov	r2, r3
 80017b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c6:	0151      	lsls	r1, r2, #5
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	440a      	add	r2, r1
 80017cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e6:	0151      	lsls	r1, r2, #5
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	440a      	add	r2, r1
 80017ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001808:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	0151      	lsls	r1, r2, #5
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	440a      	add	r2, r1
 8001820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001824:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001828:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183a:	0151      	lsls	r1, r2, #5
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	440a      	add	r2, r1
 8001840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001844:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001848:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	3301      	adds	r3, #1
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	429a      	cmp	r2, r3
 8001858:	d3a3      	bcc.n	80017a2 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001868:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800186c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001886:	f043 030b 	orr.w	r3, r3, #11
 800188a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f043 030b 	orr.w	r3, r3, #11
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	e015      	b.n	80018d0 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ca:	f043 030b 	orr.w	r3, r3, #11
 80018ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f004 f9ab 	bl	8005c4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f004 f8da 	bl	8005ac4 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191a:	d124      	bne.n	8001966 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 f970 	bl	8005c06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fab7 	bl	8004e9e <USB_GetDevSpeed>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681c      	ldr	r4, [r3, #0]
 800193c:	f001 f9f0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4620      	mov	r0, r4
 800194c:	f003 f812 	bl	8004974 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f005 ff72 	bl	800783a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f8aa 	bl	8005ac4 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b08      	cmp	r3, #8
 8001978:	d10a      	bne.n	8001990 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f005 ff4f 	bl	800781e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f002 0208 	and.w	r2, r2, #8
 800198e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 f895 	bl	8005ac4 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a4:	d10f      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f005 ffc1 	bl	8007938 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 f87a 	bl	8005ac4 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019da:	d10f      	bne.n	80019fc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 ff94 	bl	8007914 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 f85f 	bl	8005ac4 <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d10a      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f005 ffa2 	bl	800795c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 f849 	bl	8005ac4 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d115      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f005 ff92 	bl	8007978 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e000      	b.n	8001a68 <HAL_PCD_IRQHandler+0x742>
      return;
 8001a66:	bf00      	nop
    }
  }
}
 8001a68:	3734      	adds	r7, #52	; 0x34
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}

08001a6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_SetAddress+0x1a>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e013      	b.n	8001ab0 <HAL_PCD_SetAddress+0x42>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 ffa7 	bl	80059f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	460b      	mov	r3, r1
 8001acc:	803b      	strh	r3, [r7, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da0f      	bge.n	8001afe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 020f 	and.w	r2, r3, #15
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3338      	adds	r3, #56	; 0x38
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	705a      	strb	r2, [r3, #1]
 8001afc:	e00f      	b.n	8001b1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b2a:	883a      	ldrh	r2, [r7, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	78ba      	ldrb	r2, [r7, #2]
 8001b34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b48:	78bb      	ldrb	r3, [r7, #2]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d102      	bne.n	8001b54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_EP_Open+0xaa>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e00e      	b.n	8001b80 <HAL_PCD_EP_Open+0xc8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 f9b3 	bl	8004edc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0f      	bge.n	8001bbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	3338      	adds	r3, #56	; 0x38
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	705a      	strb	r2, [r3, #1]
 8001bba:	e00f      	b.n	8001bdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_Close+0x6e>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e00e      	b.n	8001c14 <HAL_PCD_EP_Close+0x8c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 f9f1 	bl	8004fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d106      	bne.n	8001c82 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fc6e 	bl	800555c <USB_EP0StartXfer>
 8001c80:	e005      	b.n	8001c8e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fa8b 	bl	80051a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3338      	adds	r3, #56	; 0x38
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6979      	ldr	r1, [r7, #20]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fc31 	bl	800555c <USB_EP0StartXfer>
 8001cfa:	e005      	b.n	8001d08 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fa4e 	bl	80051a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d901      	bls.n	8001d30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04e      	b.n	8001dce <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da0f      	bge.n	8001d58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3338      	adds	r3, #56	; 0x38
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	705a      	strb	r2, [r3, #1]
 8001d56:	e00d      	b.n	8001d74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_EP_SetStall+0x82>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e01c      	b.n	8001dce <HAL_PCD_EP_SetStall+0xbc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fd52 	bl	800584c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f003 ff44 	bl	8005c4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 020f 	and.w	r2, r3, #15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d901      	bls.n	8001df4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e042      	b.n	8001e7a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da0f      	bge.n	8001e1c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
 8001e1a:	e00f      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_EP_ClrStall+0x86>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e00e      	b.n	8001e7a <HAL_PCD_EP_ClrStall+0xa4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fd5c 	bl	8005928 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3338      	adds	r3, #56	; 0x38
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d901      	bls.n	8001eba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e067      	b.n	8001f8a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d902      	bls.n	8001ed6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ede:	e026      	b.n	8001f2e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d902      	bls.n	8001efc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3303      	adds	r3, #3
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	6978      	ldr	r0, [r7, #20]
 8001f12:	f003 fc41 	bl	8005798 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	441a      	add	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d809      	bhi.n	8001f58 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d203      	bcs.n	8001f58 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1c3      	bne.n	8001ee0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d811      	bhi.n	8001f88 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f84:	4013      	ands	r3, r2
 8001f86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	333c      	adds	r3, #60	; 0x3c
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <PCD_EP_OutXfrComplete_int+0x98>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d124      	bne.n	8002014 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe6:	6093      	str	r3, [r2, #8]
 8001fe8:	e01a      	b.n	8002020 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002000:	461a      	mov	r2, r3
 8002002:	2320      	movs	r3, #32
 8002004:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f005 fbd1 	bl	80077b4 <HAL_PCD_DataOutStageCallback>
 8002012:	e005      	b.n	8002020 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f005 fbca 	bl	80077b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	4f54310a 	.word	0x4f54310a

08002030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	3304      	adds	r3, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <PCD_EP_OutSetupPacket_int+0x64>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d90e      	bls.n	8002084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fb83 	bl	8007790 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	4f54300a 	.word	0x4f54300a

08002098 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
 80020a4:	4613      	mov	r3, r2
 80020a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020b6:	883b      	ldrh	r3, [r7, #0]
 80020b8:	0419      	lsls	r1, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
 80020c4:	e028      	b.n	8002118 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e00d      	b.n	80020f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3340      	adds	r3, #64	; 0x40
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3ec      	bcc.n	80020da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002100:	883b      	ldrh	r3, [r7, #0]
 8002102:	0418      	lsls	r0, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b01      	subs	r3, #1
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4302      	orrs	r2, r0
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	f043 0303 	orr.w	r3, r3, #3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000

080021ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ba:	d130      	bne.n	800221e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d038      	beq.n	800223c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2232      	movs	r2, #50	; 0x32
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0c9b      	lsrs	r3, r3, #18
 80021ec:	3301      	adds	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f0:	e002      	b.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d102      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f2      	bne.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002218:	d110      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e00f      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d007      	beq.n	800223c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002234:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40007000 	.word	0x40007000
 8002250:	20000000 	.word	0x20000000
 8002254:	431bde83 	.word	0x431bde83

08002258 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PWREx_EnableVddUSB+0x1c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002266:	6053      	str	r3, [r2, #4]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e3d4      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4ba1      	ldr	r3, [pc, #644]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b9e      	ldr	r3, [pc, #632]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80e4 	beq.w	8002474 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_RCC_OscConfig+0x4a>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	f040 808b 	bne.w	80023d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 8087 	bne.w	80023d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c2:	4b93      	ldr	r3, [pc, #588]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x62>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e3ac      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1a      	ldr	r2, [r3, #32]
 80022de:	4b8c      	ldr	r3, [pc, #560]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_RCC_OscConfig+0x7c>
 80022ea:	4b89      	ldr	r3, [pc, #548]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f2:	e005      	b.n	8002300 <HAL_RCC_OscConfig+0x88>
 80022f4:	4b86      	ldr	r3, [pc, #536]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002300:	4293      	cmp	r3, r2
 8002302:	d223      	bcs.n	800234c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd73 	bl	8002df4 <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e38d      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002318:	4b7d      	ldr	r3, [pc, #500]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7c      	ldr	r2, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b7a      	ldr	r3, [pc, #488]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4977      	ldr	r1, [pc, #476]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002336:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	4972      	ldr	r1, [pc, #456]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
 800234a:	e025      	b.n	8002398 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234c:	4b70      	ldr	r3, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6f      	ldr	r2, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	496a      	ldr	r1, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236a:	4b69      	ldr	r3, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fd33 	bl	8002df4 <RCC_SetFlashLatencyFromMSIRange>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e34d      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002398:	f000 fc36 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b5c      	ldr	r3, [pc, #368]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	495a      	ldr	r1, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x29c>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x2a0>)
 80023b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x2a4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fa7d 	bl	80008bc <HAL_InitTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d052      	beq.n	8002472 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	e331      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d032      	beq.n	800243e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d8:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4c      	ldr	r2, [pc, #304]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fb90 	bl	8000b08 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ec:	f7fe fb8c 	bl	8000b08 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e31a      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a40      	ldr	r2, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	493b      	ldr	r1, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	4936      	ldr	r1, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e01a      	b.n	8002474 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243e:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800244a:	f7fe fb5d 	bl	8000b08 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002452:	f7fe fb59 	bl	8000b08 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e2e7      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x1da>
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002472:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d074      	beq.n	800256a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x21a>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b0c      	cmp	r3, #12
 800248a:	d10e      	bne.n	80024aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d10b      	bne.n	80024aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d064      	beq.n	8002568 <HAL_RCC_OscConfig+0x2f0>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d160      	bne.n	8002568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e2c4      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x24a>
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e01d      	b.n	80024fe <HAL_RCC_OscConfig+0x286>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x26e>
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x286>
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x298>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01c      	beq.n	8002540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe faff 	bl	8000b08 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250c:	e011      	b.n	8002532 <HAL_RCC_OscConfig+0x2ba>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	080080b0 	.word	0x080080b0
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe faf2 	bl	8000b08 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e280      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	4baf      	ldr	r3, [pc, #700]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x2a8>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fae2 	bl	8000b08 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe fade 	bl	8000b08 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e26c      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	4ba5      	ldr	r3, [pc, #660]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x2d0>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d060      	beq.n	8002638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d005      	beq.n	8002588 <HAL_RCC_OscConfig+0x310>
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d119      	bne.n	80025b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d116      	bne.n	80025b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002588:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x328>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e249      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	4990      	ldr	r1, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b4:	e040      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d023      	beq.n	8002606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a8b      	ldr	r2, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fa9d 	bl	8000b08 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe fa99 	bl	8000b08 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e227      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b7f      	ldr	r3, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	497c      	ldr	r1, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e018      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a79      	ldr	r2, [pc, #484]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800260c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fa79 	bl	8000b08 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fa75 	bl	8000b08 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e203      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d03c      	beq.n	80026be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01c      	beq.n	8002686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264c:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fa54 	bl	8000b08 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fa50 	bl	8000b08 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1de      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCC_OscConfig+0x3ec>
 8002684:	e01b      	b.n	80026be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7fe fa37 	bl	8000b08 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fa33 	bl	8000b08 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1c1      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80a6 	beq.w	8002818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b3e      	ldr	r3, [pc, #248]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d118      	bne.n	8002736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002710:	f7fe f9fa 	bl	8000b08 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe f9f6 	bl	8000b08 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e184      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_OscConfig+0x57c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_RCC_OscConfig+0x4d8>
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274e:	e024      	b.n	800279a <HAL_RCC_OscConfig+0x522>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d110      	bne.n	800277a <HAL_RCC_OscConfig+0x502>
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002778:	e00f      	b.n	800279a <HAL_RCC_OscConfig+0x522>
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7fe f9b1 	bl	8000b08 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe f9ad 	bl	8000b08 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e139      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ed      	beq.n	80027aa <HAL_RCC_OscConfig+0x532>
 80027ce:	e01a      	b.n	8002806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe f99a 	bl	8000b08 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe f996 	bl	8000b08 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d906      	bls.n	80027f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e122      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e8      	bne.n	80027d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7ffb      	ldrb	r3, [r7, #31]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b8b      	ldr	r3, [pc, #556]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4a8a      	ldr	r2, [pc, #552]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8108 	beq.w	8002a32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	2b02      	cmp	r3, #2
 8002828:	f040 80d0 	bne.w	80029cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800282c:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	429a      	cmp	r2, r3
 800283e:	d130      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	3b01      	subs	r3, #1
 800284c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d127      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	2a07      	cmp	r2, #7
 800286e:	bf14      	ite	ne
 8002870:	2201      	movne	r2, #1
 8002872:	2200      	moveq	r2, #0
 8002874:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002876:	4293      	cmp	r3, r2
 8002878:	d113      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d06e      	beq.n	8002980 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d069      	beq.n	800297c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0b7      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c4:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5c      	ldr	r2, [pc, #368]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d0:	f7fe f91a 	bl	8000b08 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe f916 	bl	8000b08 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0a4      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x7c8>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002906:	3a01      	subs	r2, #1
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002910:	0212      	lsls	r2, r2, #8
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002918:	0852      	lsrs	r2, r2, #1
 800291a:	3a01      	subs	r2, #1
 800291c:	0552      	lsls	r2, r2, #21
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002924:	0852      	lsrs	r2, r2, #1
 8002926:	3a01      	subs	r2, #1
 8002928:	0652      	lsls	r2, r2, #25
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002930:	0912      	lsrs	r2, r2, #4
 8002932:	0452      	lsls	r2, r2, #17
 8002934:	430a      	orrs	r2, r1
 8002936:	4941      	ldr	r1, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3e      	ldr	r2, [pc, #248]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002948:	4b3c      	ldr	r3, [pc, #240]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a3b      	ldr	r2, [pc, #236]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002954:	f7fe f8d8 	bl	8000b08 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe f8d4 	bl	8000b08 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e062      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297a:	e05a      	b.n	8002a32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e059      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d152      	bne.n	8002a32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a4:	f7fe f8b0 	bl	8000b08 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe f8ac 	bl	8000b08 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e03a      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x734>
 80029ca:	e032      	b.n	8002a32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d02d      	beq.n	8002a2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029f0:	f023 0303 	bic.w	r3, r3, #3
 80029f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 80029fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe f87f 	bl	8000b08 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe f87b 	bl	8000b08 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e009      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x796>
 8002a2c:	e001      	b.n	8002a32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	f99d808c 	.word	0xf99d808c

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0c8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4961      	ldr	r1, [pc, #388]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b0      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d04c      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9c:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d121      	bne.n	8002aec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e09e      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d115      	bne.n	8002aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e092      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e086      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e07e      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	493f      	ldr	r1, [pc, #252]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afe:	f7fe f803 	bl	8000b08 <HAL_GetTick>
 8002b02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fd ffff 	bl	8000b08 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e066      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 020c 	and.w	r2, r3, #12
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d1eb      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	492c      	ldr	r1, [pc, #176]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d210      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4924      	ldr	r1, [pc, #144]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e036      	b.n	8002bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4918      	ldr	r1, [pc, #96]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4910      	ldr	r1, [pc, #64]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bba:	f000 f825 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490c      	ldr	r1, [pc, #48]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fe6c 	bl	80008bc <HAL_InitTick>
 8002be4:	4603      	mov	r3, r0
 8002be6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	080080b0 	.word	0x080080b0
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d121      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d11e      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e005      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c64:	4a2b      	ldr	r2, [pc, #172]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e004      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d134      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002cac:	e005      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb0:	617b      	str	r3, [r7, #20]
      break;
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cb6:	617b      	str	r3, [r7, #20]
      break;
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	617b      	str	r3, [r7, #20]
      break;
 8002cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	3301      	adds	r3, #1
 8002ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	fb02 f203 	mul.w	r2, r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0e5b      	lsrs	r3, r3, #25
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d00:	69bb      	ldr	r3, [r7, #24]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	080080c8 	.word	0x080080c8
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4904      	ldr	r1, [pc, #16]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	080080c0 	.word	0x080080c0

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d68:	f7ff ffda 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0adb      	lsrs	r3, r3, #11
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4904      	ldr	r1, [pc, #16]	; (8002d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	080080c0 	.word	0x080080c0

08002d90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_RCC_GetClockConfig+0x60>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0207 	and.w	r2, r3, #7
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40022000 	.word	0x40022000

08002df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff f9c0 	bl	8002190 <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
 8002e12:	e014      	b.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	4a24      	ldr	r2, [pc, #144]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e2c:	f7ff f9b0 	bl	8002190 <HAL_PWREx_GetVoltageRange>
 8002e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e44:	d10b      	bne.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d919      	bls.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e50:	d902      	bls.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e52:	2302      	movs	r3, #2
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	e013      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e58:	2301      	movs	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e010      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d902      	bls.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e64:	2303      	movs	r3, #3
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e00a      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d102      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e70:	2302      	movs	r3, #2
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e004      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d101      	bne.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 0207 	bic.w	r2, r3, #7
 8002e88:	4909      	ldr	r1, [pc, #36]	; (8002eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40022000 	.word	0x40022000

08002eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d041      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ed8:	d02a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ede:	d824      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eea:	d81e      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef4:	d010      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ef6:	e018      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef8:	4b86      	ldr	r3, [pc, #536]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a85      	ldr	r2, [pc, #532]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f04:	e015      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fabb 	bl	8003488 <RCCEx_PLLSAI1_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f16:	e00c      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fba6 	bl	8003670 <RCCEx_PLLSAI2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f28:	e003      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f2e:	e000      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f38:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f46:	4973      	ldr	r1, [pc, #460]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f4e:	e001      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d041      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f68:	d02a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f6e:	d824      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f7a:	d81e      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f86:	e018      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f88:	4b62      	ldr	r3, [pc, #392]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a61      	ldr	r2, [pc, #388]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f94:	e015      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fa73 	bl	8003488 <RCCEx_PLLSAI1_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa6:	e00c      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3320      	adds	r3, #32
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fb5e 	bl	8003670 <RCCEx_PLLSAI2_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb8:	e003      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fc8:	4b52      	ldr	r3, [pc, #328]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd6:	494f      	ldr	r1, [pc, #316]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fde:	e001      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a0 	beq.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a40      	ldr	r2, [pc, #256]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003034:	f7fd fd68 	bl	8000b08 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fd fd64 	bl	8000b08 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	74fb      	strb	r3, [r7, #19]
        break;
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d15c      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d019      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800308c:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a20      	ldr	r2, [pc, #128]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fd fd23 	bl	8000b08 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	e00b      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd fd1f 	bl	8000b08 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d902      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	74fb      	strb	r3, [r7, #19]
            break;
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ec      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800310a:	e009      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
 8003110:	e006      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003120:	7c7b      	ldrb	r3, [r7, #17]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b9e      	ldr	r3, [pc, #632]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	4a9d      	ldr	r2, [pc, #628]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313e:	4b98      	ldr	r3, [pc, #608]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003144:	f023 0203 	bic.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	4994      	ldr	r1, [pc, #592]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003160:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f023 020c 	bic.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	498c      	ldr	r1, [pc, #560]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003182:	4b87      	ldr	r3, [pc, #540]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	4983      	ldr	r1, [pc, #524]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a4:	4b7e      	ldr	r3, [pc, #504]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	497b      	ldr	r1, [pc, #492]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c6:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d4:	4972      	ldr	r1, [pc, #456]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e8:	4b6d      	ldr	r3, [pc, #436]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	496a      	ldr	r1, [pc, #424]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800320a:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	4961      	ldr	r1, [pc, #388]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323a:	4959      	ldr	r1, [pc, #356]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800324e:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	4950      	ldr	r1, [pc, #320]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	4948      	ldr	r1, [pc, #288]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	493f      	ldr	r1, [pc, #252]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d028      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c2:	4937      	ldr	r1, [pc, #220]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	e011      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ea:	d10c      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f8c8 	bl	8003488 <RCCEx_PLLSAI1_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d028      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	491f      	ldr	r1, [pc, #124]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003330:	d106      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333c:	60d3      	str	r3, [r2, #12]
 800333e:	e011      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f899 	bl	8003488 <RCCEx_PLLSAI1_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02b      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800338e:	d109      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a02      	ldr	r2, [pc, #8]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339a:	60d3      	str	r3, [r2, #12]
 800339c:	e014      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f867 	bl	8003488 <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e2:	4928      	ldr	r1, [pc, #160]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033f2:	d10d      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	2102      	movs	r1, #2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f844 	bl	8003488 <RCCEx_PLLSAI1_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	74bb      	strb	r3, [r7, #18]
 800340e:	e011      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3320      	adds	r3, #32
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f925 	bl	8003670 <RCCEx_PLLSAI2_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800344e:	490d      	ldr	r1, [pc, #52]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800347a:	7cbb      	ldrb	r3, [r7, #18]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000

08003488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003496:	4b75      	ldr	r3, [pc, #468]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0203 	and.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10d      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
       ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ba:	4b6c      	ldr	r3, [pc, #432]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d047      	beq.n	800355e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e044      	b.n	800355e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d018      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x86>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d825      	bhi.n	800352c <RCCEx_PLLSAI1_Config+0xa4>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <RCCEx_PLLSAI1_Config+0x62>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d009      	beq.n	80034fc <RCCEx_PLLSAI1_Config+0x74>
 80034e8:	e020      	b.n	800352c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ea:	4b60      	ldr	r3, [pc, #384]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11d      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fa:	e01a      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034fc:	4b5b      	ldr	r3, [pc, #364]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e013      	b.n	8003536 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800350e:	4b57      	ldr	r3, [pc, #348]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352a:	e006      	b.n	800353a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e004      	b.n	800353c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353a:	bf00      	nop
    }

    if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	430b      	orrs	r3, r1
 8003558:	4944      	ldr	r1, [pc, #272]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d17d      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a40      	ldr	r2, [pc, #256]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800356e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003570:	f7fd faca 	bl	8000b08 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003578:	f7fd fac6 	bl	8000b08 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
        break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800358c:	4b37      	ldr	r3, [pc, #220]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ef      	bne.n	8003578 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d160      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a4:	4b31      	ldr	r3, [pc, #196]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	0211      	lsls	r1, r2, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	0912      	lsrs	r2, r2, #4
 80035bc:	0452      	lsls	r2, r2, #17
 80035be:	430a      	orrs	r2, r1
 80035c0:	492a      	ldr	r1, [pc, #168]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]
 80035c6:	e027      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d112      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	0211      	lsls	r1, r2, #8
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6912      	ldr	r2, [r2, #16]
 80035e4:	0852      	lsrs	r2, r2, #1
 80035e6:	3a01      	subs	r2, #1
 80035e8:	0552      	lsls	r2, r2, #21
 80035ea:	430a      	orrs	r2, r1
 80035ec:	491f      	ldr	r1, [pc, #124]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	610b      	str	r3, [r1, #16]
 80035f2:	e011      	b.n	8003618 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0211      	lsls	r1, r2, #8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6952      	ldr	r2, [r2, #20]
 800360a:	0852      	lsrs	r2, r2, #1
 800360c:	3a01      	subs	r2, #1
 800360e:	0652      	lsls	r2, r2, #25
 8003610:	430a      	orrs	r2, r1
 8003612:	4916      	ldr	r1, [pc, #88]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fd fa70 	bl	8000b08 <HAL_GetTick>
 8003628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800362a:	e009      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362c:	f7fd fa6c 	bl	8000b08 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	73fb      	strb	r3, [r7, #15]
          break;
 800363e:	e005      	b.n	800364c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ef      	beq.n	800362c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	4904      	ldr	r1, [pc, #16]	; (800366c <RCCEx_PLLSAI1_Config+0x1e4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000

08003670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
       ||
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036a2:	4b61      	ldr	r3, [pc, #388]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
       ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d047      	beq.n	8003746 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e044      	b.n	8003746 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d018      	beq.n	80036f6 <RCCEx_PLLSAI2_Config+0x86>
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d825      	bhi.n	8003714 <RCCEx_PLLSAI2_Config+0xa4>
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <RCCEx_PLLSAI2_Config+0x62>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d009      	beq.n	80036e4 <RCCEx_PLLSAI2_Config+0x74>
 80036d0:	e020      	b.n	8003714 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d2:	4b55      	ldr	r3, [pc, #340]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e01a      	b.n	800371a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f4:	e013      	b.n	800371e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036f6:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003712:	e006      	b.n	8003722 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e004      	b.n	8003724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003722:	bf00      	nop
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372a:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	430b      	orrs	r3, r1
 8003740:	4939      	ldr	r1, [pc, #228]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d167      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a35      	ldr	r2, [pc, #212]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fd f9d6 	bl	8000b08 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003760:	f7fd f9d2 	bl	8000b08 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003774:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d14a      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800378c:	4b26      	ldr	r3, [pc, #152]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	0912      	lsrs	r2, r2, #4
 80037a4:	0452      	lsls	r2, r2, #17
 80037a6:	430a      	orrs	r2, r1
 80037a8:	491f      	ldr	r1, [pc, #124]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	614b      	str	r3, [r1, #20]
 80037ae:	e011      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	0211      	lsls	r1, r2, #8
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6912      	ldr	r2, [r2, #16]
 80037c6:	0852      	lsrs	r2, r2, #1
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0652      	lsls	r2, r2, #25
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4916      	ldr	r1, [pc, #88]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fd f992 	bl	8000b08 <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e6:	e009      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e8:	f7fd f98e 	bl	8000b08 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	73fb      	strb	r3, [r7, #15]
          break;
 80037fa:	e005      	b.n	8003808 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ef      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4904      	ldr	r1, [pc, #16]	; (8003828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	4313      	orrs	r3, r2
 800381a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e049      	b.n	80038d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f841 	bl	80038da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f000 f9f8 	bl	8003c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e04f      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01d      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d018      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00e      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <HAL_TIM_Base_Start_IT+0x76>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d115      	bne.n	8003992 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <HAL_TIM_Base_Start_IT+0xdc>)
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b06      	cmp	r3, #6
 8003976:	d015      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0xb4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d011      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	e008      	b.n	80039a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e000      	b.n	80039a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	00010007 	.word	0x00010007

080039d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d122      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d11b      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0202 	mvn.w	r2, #2
 80039fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f905 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8f7 	bl	8003c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f908 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d122      	bne.n	8003a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d11b      	bne.n	8003a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0204 	mvn.w	r2, #4
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8db 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8cd 	bl	8003c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8de 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d122      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0208 	mvn.w	r2, #8
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8b1 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8a3 	bl	8003c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8b4 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d122      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d11b      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0210 	mvn.w	r2, #16
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2208      	movs	r2, #8
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f887 	bl	8003c22 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f879 	bl	8003c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f88a 	bl	8003c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0201 	mvn.w	r2, #1
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fe1a 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f914 	bl	8003da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8e:	d10e      	bne.n	8003bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b80      	cmp	r3, #128	; 0x80
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f907 	bl	8003dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f838 	bl	8003c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d10e      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0220 	mvn.w	r2, #32
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8c7 	bl	8003d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <TIM_Base_SetConfig+0x114>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <TIM_Base_SetConfig+0x118>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3c      	ldr	r2, [pc, #240]	; (8003d7c <TIM_Base_SetConfig+0x11c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <TIM_Base_SetConfig+0x120>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <TIM_Base_SetConfig+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d108      	bne.n	8003cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <TIM_Base_SetConfig+0x114>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d01b      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2c      	ldr	r2, [pc, #176]	; (8003d78 <TIM_Base_SetConfig+0x118>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d017      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <TIM_Base_SetConfig+0x11c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <TIM_Base_SetConfig+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <TIM_Base_SetConfig+0x124>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a28      	ldr	r2, [pc, #160]	; (8003d88 <TIM_Base_SetConfig+0x128>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <TIM_Base_SetConfig+0x12c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <TIM_Base_SetConfig+0x130>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <TIM_Base_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0xf8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <TIM_Base_SetConfig+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0xf8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <TIM_Base_SetConfig+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <TIM_Base_SetConfig+0x12c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0xf8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0f      	ldr	r2, [pc, #60]	; (8003d90 <TIM_Base_SetConfig+0x130>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	615a      	str	r2, [r3, #20]
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40013400 	.word	0x40013400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800

08003d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e040      	b.n	8003e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fc fd04 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f992 	bl	8004138 <UART_SetConfig>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e022      	b.n	8003e64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fc10 	bl	800464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fc97 	bl	8004790 <UART_CheckIdleState>
 8003e62:	4603      	mov	r3, r0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	f040 8082 	bne.w	8003f8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_UART_Transmit+0x26>
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07a      	b.n	8003f8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_Transmit+0x38>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e073      	b.n	8003f8c <HAL_UART_Transmit+0x120>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2221      	movs	r2, #33	; 0x21
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eba:	f7fc fe25 	bl	8000b08 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d108      	bne.n	8003eec <HAL_UART_Transmit+0x80>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003efc:	e02d      	b.n	8003f5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	; 0x80
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fc8a 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e039      	b.n	8003f8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3302      	adds	r3, #2
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e008      	b.n	8003f48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1cb      	bne.n	8003efe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2140      	movs	r1, #64	; 0x40
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 fc56 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e005      	b.n	8003f8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	f040 80bf 	bne.w	800412c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Receive+0x26>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0b7      	b.n	800412e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Receive+0x38>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0b0      	b.n	800412e <HAL_UART_Receive+0x19a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2222      	movs	r2, #34	; 0x22
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe8:	f7fc fd8e 	bl	8000b08 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d10e      	bne.n	8004026 <HAL_UART_Receive+0x92>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_UART_Receive+0x88>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401a:	e02d      	b.n	8004078 <HAL_UART_Receive+0xe4>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	22ff      	movs	r2, #255	; 0xff
 8004020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004024:	e028      	b.n	8004078 <HAL_UART_Receive+0xe4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_UART_Receive+0xb6>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_UART_Receive+0xac>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800403e:	e01b      	b.n	8004078 <HAL_UART_Receive+0xe4>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	227f      	movs	r2, #127	; 0x7f
 8004044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004048:	e016      	b.n	8004078 <HAL_UART_Receive+0xe4>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004052:	d10d      	bne.n	8004070 <HAL_UART_Receive+0xdc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_UART_Receive+0xd2>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	227f      	movs	r2, #127	; 0x7f
 8004060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004064:	e008      	b.n	8004078 <HAL_UART_Receive+0xe4>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	223f      	movs	r2, #63	; 0x3f
 800406a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800406e:	e003      	b.n	8004078 <HAL_UART_Receive+0xe4>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800407e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d108      	bne.n	800409c <HAL_UART_Receive+0x108>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	e003      	b.n	80040a4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040ac:	e033      	b.n	8004116 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2120      	movs	r1, #32
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fbb2 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e032      	b.n	800412e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	8a7b      	ldrh	r3, [r7, #18]
 80040d8:	4013      	ands	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3302      	adds	r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e00d      	b.n	8004104 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8a7b      	ldrh	r3, [r7, #18]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	4013      	ands	r3, r2
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1c5      	bne.n	80040ae <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	b5b0      	push	{r4, r5, r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4313      	orrs	r3, r2
 800415a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4bad      	ldr	r3, [pc, #692]	; (8004418 <UART_SetConfig+0x2e0>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	69f9      	ldr	r1, [r7, #28]
 800416c:	430b      	orrs	r3, r1
 800416e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4aa2      	ldr	r2, [pc, #648]	; (800441c <UART_SetConfig+0x2e4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	4313      	orrs	r3, r2
 800419e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a99      	ldr	r2, [pc, #612]	; (8004420 <UART_SetConfig+0x2e8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d121      	bne.n	8004202 <UART_SetConfig+0xca>
 80041be:	4b99      	ldr	r3, [pc, #612]	; (8004424 <UART_SetConfig+0x2ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d817      	bhi.n	80041fc <UART_SetConfig+0xc4>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x9c>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f1 	.word	0x080041f1
 80041dc:	080041eb 	.word	0x080041eb
 80041e0:	080041f7 	.word	0x080041f7
 80041e4:	2301      	movs	r3, #1
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e0e7      	b.n	80043ba <UART_SetConfig+0x282>
 80041ea:	2302      	movs	r3, #2
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e0e4      	b.n	80043ba <UART_SetConfig+0x282>
 80041f0:	2304      	movs	r3, #4
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e0e1      	b.n	80043ba <UART_SetConfig+0x282>
 80041f6:	2308      	movs	r3, #8
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e0de      	b.n	80043ba <UART_SetConfig+0x282>
 80041fc:	2310      	movs	r3, #16
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e0db      	b.n	80043ba <UART_SetConfig+0x282>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a88      	ldr	r2, [pc, #544]	; (8004428 <UART_SetConfig+0x2f0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d132      	bne.n	8004272 <UART_SetConfig+0x13a>
 800420c:	4b85      	ldr	r3, [pc, #532]	; (8004424 <UART_SetConfig+0x2ec>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d828      	bhi.n	800426c <UART_SetConfig+0x134>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0xe8>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004255 	.word	0x08004255
 8004224:	0800426d 	.word	0x0800426d
 8004228:	0800426d 	.word	0x0800426d
 800422c:	0800426d 	.word	0x0800426d
 8004230:	08004261 	.word	0x08004261
 8004234:	0800426d 	.word	0x0800426d
 8004238:	0800426d 	.word	0x0800426d
 800423c:	0800426d 	.word	0x0800426d
 8004240:	0800425b 	.word	0x0800425b
 8004244:	0800426d 	.word	0x0800426d
 8004248:	0800426d 	.word	0x0800426d
 800424c:	0800426d 	.word	0x0800426d
 8004250:	08004267 	.word	0x08004267
 8004254:	2300      	movs	r3, #0
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e0af      	b.n	80043ba <UART_SetConfig+0x282>
 800425a:	2302      	movs	r3, #2
 800425c:	76fb      	strb	r3, [r7, #27]
 800425e:	e0ac      	b.n	80043ba <UART_SetConfig+0x282>
 8004260:	2304      	movs	r3, #4
 8004262:	76fb      	strb	r3, [r7, #27]
 8004264:	e0a9      	b.n	80043ba <UART_SetConfig+0x282>
 8004266:	2308      	movs	r3, #8
 8004268:	76fb      	strb	r3, [r7, #27]
 800426a:	e0a6      	b.n	80043ba <UART_SetConfig+0x282>
 800426c:	2310      	movs	r3, #16
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e0a3      	b.n	80043ba <UART_SetConfig+0x282>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6d      	ldr	r2, [pc, #436]	; (800442c <UART_SetConfig+0x2f4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d120      	bne.n	80042be <UART_SetConfig+0x186>
 800427c:	4b69      	ldr	r3, [pc, #420]	; (8004424 <UART_SetConfig+0x2ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004286:	2b30      	cmp	r3, #48	; 0x30
 8004288:	d013      	beq.n	80042b2 <UART_SetConfig+0x17a>
 800428a:	2b30      	cmp	r3, #48	; 0x30
 800428c:	d814      	bhi.n	80042b8 <UART_SetConfig+0x180>
 800428e:	2b20      	cmp	r3, #32
 8004290:	d009      	beq.n	80042a6 <UART_SetConfig+0x16e>
 8004292:	2b20      	cmp	r3, #32
 8004294:	d810      	bhi.n	80042b8 <UART_SetConfig+0x180>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <UART_SetConfig+0x168>
 800429a:	2b10      	cmp	r3, #16
 800429c:	d006      	beq.n	80042ac <UART_SetConfig+0x174>
 800429e:	e00b      	b.n	80042b8 <UART_SetConfig+0x180>
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e089      	b.n	80043ba <UART_SetConfig+0x282>
 80042a6:	2302      	movs	r3, #2
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e086      	b.n	80043ba <UART_SetConfig+0x282>
 80042ac:	2304      	movs	r3, #4
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e083      	b.n	80043ba <UART_SetConfig+0x282>
 80042b2:	2308      	movs	r3, #8
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e080      	b.n	80043ba <UART_SetConfig+0x282>
 80042b8:	2310      	movs	r3, #16
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e07d      	b.n	80043ba <UART_SetConfig+0x282>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <UART_SetConfig+0x2f8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d120      	bne.n	800430a <UART_SetConfig+0x1d2>
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <UART_SetConfig+0x2ec>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042d2:	2bc0      	cmp	r3, #192	; 0xc0
 80042d4:	d013      	beq.n	80042fe <UART_SetConfig+0x1c6>
 80042d6:	2bc0      	cmp	r3, #192	; 0xc0
 80042d8:	d814      	bhi.n	8004304 <UART_SetConfig+0x1cc>
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d009      	beq.n	80042f2 <UART_SetConfig+0x1ba>
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d810      	bhi.n	8004304 <UART_SetConfig+0x1cc>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <UART_SetConfig+0x1b4>
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x1c0>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x1cc>
 80042ec:	2300      	movs	r3, #0
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e063      	b.n	80043ba <UART_SetConfig+0x282>
 80042f2:	2302      	movs	r3, #2
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e060      	b.n	80043ba <UART_SetConfig+0x282>
 80042f8:	2304      	movs	r3, #4
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e05d      	b.n	80043ba <UART_SetConfig+0x282>
 80042fe:	2308      	movs	r3, #8
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e05a      	b.n	80043ba <UART_SetConfig+0x282>
 8004304:	2310      	movs	r3, #16
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e057      	b.n	80043ba <UART_SetConfig+0x282>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a49      	ldr	r2, [pc, #292]	; (8004434 <UART_SetConfig+0x2fc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d125      	bne.n	8004360 <UART_SetConfig+0x228>
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <UART_SetConfig+0x2ec>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d017      	beq.n	8004354 <UART_SetConfig+0x21c>
 8004324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004328:	d817      	bhi.n	800435a <UART_SetConfig+0x222>
 800432a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432e:	d00b      	beq.n	8004348 <UART_SetConfig+0x210>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004334:	d811      	bhi.n	800435a <UART_SetConfig+0x222>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <UART_SetConfig+0x20a>
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d006      	beq.n	800434e <UART_SetConfig+0x216>
 8004340:	e00b      	b.n	800435a <UART_SetConfig+0x222>
 8004342:	2300      	movs	r3, #0
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e038      	b.n	80043ba <UART_SetConfig+0x282>
 8004348:	2302      	movs	r3, #2
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e035      	b.n	80043ba <UART_SetConfig+0x282>
 800434e:	2304      	movs	r3, #4
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e032      	b.n	80043ba <UART_SetConfig+0x282>
 8004354:	2308      	movs	r3, #8
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e02f      	b.n	80043ba <UART_SetConfig+0x282>
 800435a:	2310      	movs	r3, #16
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e02c      	b.n	80043ba <UART_SetConfig+0x282>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2d      	ldr	r2, [pc, #180]	; (800441c <UART_SetConfig+0x2e4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d125      	bne.n	80043b6 <UART_SetConfig+0x27e>
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <UART_SetConfig+0x2ec>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004378:	d017      	beq.n	80043aa <UART_SetConfig+0x272>
 800437a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800437e:	d817      	bhi.n	80043b0 <UART_SetConfig+0x278>
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004384:	d00b      	beq.n	800439e <UART_SetConfig+0x266>
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438a:	d811      	bhi.n	80043b0 <UART_SetConfig+0x278>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <UART_SetConfig+0x260>
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d006      	beq.n	80043a4 <UART_SetConfig+0x26c>
 8004396:	e00b      	b.n	80043b0 <UART_SetConfig+0x278>
 8004398:	2300      	movs	r3, #0
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e00d      	b.n	80043ba <UART_SetConfig+0x282>
 800439e:	2302      	movs	r3, #2
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e00a      	b.n	80043ba <UART_SetConfig+0x282>
 80043a4:	2304      	movs	r3, #4
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e007      	b.n	80043ba <UART_SetConfig+0x282>
 80043aa:	2308      	movs	r3, #8
 80043ac:	76fb      	strb	r3, [r7, #27]
 80043ae:	e004      	b.n	80043ba <UART_SetConfig+0x282>
 80043b0:	2310      	movs	r3, #16
 80043b2:	76fb      	strb	r3, [r7, #27]
 80043b4:	e001      	b.n	80043ba <UART_SetConfig+0x282>
 80043b6:	2310      	movs	r3, #16
 80043b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <UART_SetConfig+0x2e4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	f040 8087 	bne.w	80044d4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c6:	7efb      	ldrb	r3, [r7, #27]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d837      	bhi.n	800443c <UART_SetConfig+0x304>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x29c>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	08004401 	.word	0x08004401
 80043e0:	0800443d 	.word	0x0800443d
 80043e4:	08004407 	.word	0x08004407
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	0800443d 	.word	0x0800443d
 80043f4:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe fc9e 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80043fc:	6178      	str	r0, [r7, #20]
        break;
 80043fe:	e022      	b.n	8004446 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <UART_SetConfig+0x300>)
 8004402:	617b      	str	r3, [r7, #20]
        break;
 8004404:	e01f      	b.n	8004446 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe fbff 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800440a:	6178      	str	r0, [r7, #20]
        break;
 800440c:	e01b      	b.n	8004446 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e017      	b.n	8004446 <UART_SetConfig+0x30e>
 8004416:	bf00      	nop
 8004418:	efff69f3 	.word	0xefff69f3
 800441c:	40008000 	.word	0x40008000
 8004420:	40013800 	.word	0x40013800
 8004424:	40021000 	.word	0x40021000
 8004428:	40004400 	.word	0x40004400
 800442c:	40004800 	.word	0x40004800
 8004430:	40004c00 	.word	0x40004c00
 8004434:	40005000 	.word	0x40005000
 8004438:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	76bb      	strb	r3, [r7, #26]
        break;
 8004444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80f1 	beq.w	8004630 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	429a      	cmp	r2, r3
 800445c:	d305      	bcc.n	800446a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	429a      	cmp	r2, r3
 8004468:	d902      	bls.n	8004470 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	76bb      	strb	r3, [r7, #26]
 800446e:	e0df      	b.n	8004630 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4618      	mov	r0, r3
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	020b      	lsls	r3, r1, #8
 8004482:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004486:	0202      	lsls	r2, r0, #8
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	6849      	ldr	r1, [r1, #4]
 800448c:	0849      	lsrs	r1, r1, #1
 800448e:	4608      	mov	r0, r1
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	1814      	adds	r4, r2, r0
 8004496:	eb43 0501 	adc.w	r5, r3, r1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fb fe8e 	bl	80001c8 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ba:	d308      	bcc.n	80044ce <UART_SetConfig+0x396>
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c2:	d204      	bcs.n	80044ce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e0b0      	b.n	8004630 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	76bb      	strb	r3, [r7, #26]
 80044d2:	e0ad      	b.n	8004630 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d15c      	bne.n	8004598 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80044de:	7efb      	ldrb	r3, [r7, #27]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d828      	bhi.n	8004536 <UART_SetConfig+0x3fe>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <UART_SetConfig+0x3b4>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004521 	.word	0x08004521
 80044f8:	08004537 	.word	0x08004537
 80044fc:	08004527 	.word	0x08004527
 8004500:	08004537 	.word	0x08004537
 8004504:	08004537 	.word	0x08004537
 8004508:	08004537 	.word	0x08004537
 800450c:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004510:	f7fe fc12 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8004514:	6178      	str	r0, [r7, #20]
        break;
 8004516:	e013      	b.n	8004540 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004518:	f7fe fc24 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 800451c:	6178      	str	r0, [r7, #20]
        break;
 800451e:	e00f      	b.n	8004540 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b49      	ldr	r3, [pc, #292]	; (8004648 <UART_SetConfig+0x510>)
 8004522:	617b      	str	r3, [r7, #20]
        break;
 8004524:	e00c      	b.n	8004540 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe fb6f 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 800452a:	6178      	str	r0, [r7, #20]
        break;
 800452c:	e008      	b.n	8004540 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	617b      	str	r3, [r7, #20]
        break;
 8004534:	e004      	b.n	8004540 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	76bb      	strb	r3, [r7, #26]
        break;
 800453e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d074      	beq.n	8004630 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	005a      	lsls	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	b29b      	uxth	r3, r3
 800455c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d916      	bls.n	8004592 <UART_SetConfig+0x45a>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d212      	bcs.n	8004592 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	b29b      	uxth	r3, r3
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	b29a      	uxth	r2, r3
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	4313      	orrs	r3, r2
 8004586:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	60da      	str	r2, [r3, #12]
 8004590:	e04e      	b.n	8004630 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	76bb      	strb	r3, [r7, #26]
 8004596:	e04b      	b.n	8004630 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004598:	7efb      	ldrb	r3, [r7, #27]
 800459a:	2b08      	cmp	r3, #8
 800459c:	d827      	bhi.n	80045ee <UART_SetConfig+0x4b6>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x46c>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	080045df 	.word	0x080045df
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	080045ef 	.word	0x080045ef
 80045c0:	080045ef 	.word	0x080045ef
 80045c4:	080045e7 	.word	0x080045e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fbb6 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80045cc:	6178      	str	r0, [r7, #20]
        break;
 80045ce:	e013      	b.n	80045f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe fbc8 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 80045d4:	6178      	str	r0, [r7, #20]
        break;
 80045d6:	e00f      	b.n	80045f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <UART_SetConfig+0x510>)
 80045da:	617b      	str	r3, [r7, #20]
        break;
 80045dc:	e00c      	b.n	80045f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045de:	f7fe fb13 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 80045e2:	6178      	str	r0, [r7, #20]
        break;
 80045e4:	e008      	b.n	80045f8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	617b      	str	r3, [r7, #20]
        break;
 80045ec:	e004      	b.n	80045f8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	76bb      	strb	r3, [r7, #26]
        break;
 80045f6:	bf00      	nop
    }

    if (pclk != 0U)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	085a      	lsrs	r2, r3, #1
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	441a      	add	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	b29b      	uxth	r3, r3
 8004612:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b0f      	cmp	r3, #15
 8004618:	d908      	bls.n	800462c <UART_SetConfig+0x4f4>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d204      	bcs.n	800462c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e001      	b.n	8004630 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800463c:	7ebb      	ldrb	r3, [r7, #26]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}
 8004646:	bf00      	nop
 8004648:	00f42400 	.word	0x00f42400

0800464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01a      	beq.n	8004762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474a:	d10a      	bne.n	8004762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a0:	f7fc f9b2 	bl	8000b08 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d10e      	bne.n	80047d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f82d 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e023      	b.n	800481a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d10e      	bne.n	80047fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f817 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00d      	b.n	800481a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	e05e      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d05a      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fc f964 	bl	8000b08 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <UART_WaitOnFlagUntilTimeout+0x30>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11b      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004860:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e043      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02c      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a6:	d124      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048c0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e00f      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4013      	ands	r3, r2
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	429a      	cmp	r2, r3
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	429a      	cmp	r2, r3
 800490e:	d091      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491a:	b084      	sub	sp, #16
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	f107 001c 	add.w	r0, r7, #28
 8004928:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f001 f9cf 	bl	8005cdc <USB_CoreReset>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
 8004954:	e005      	b.n	8004962 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800496e:	b004      	add	sp, #16
 8004970:	4770      	bx	lr
	...

08004974 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d165      	bne.n	8004a54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a3e      	ldr	r2, [pc, #248]	; (8004a84 <USB_SetTurnaroundTime+0x110>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d906      	bls.n	800499e <USB_SetTurnaroundTime+0x2a>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <USB_SetTurnaroundTime+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d202      	bcs.n	800499e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004998:	230f      	movs	r3, #15
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e05c      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4a39      	ldr	r2, [pc, #228]	; (8004a88 <USB_SetTurnaroundTime+0x114>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d306      	bcc.n	80049b4 <USB_SetTurnaroundTime+0x40>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4a38      	ldr	r2, [pc, #224]	; (8004a8c <USB_SetTurnaroundTime+0x118>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d202      	bcs.n	80049b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049ae:	230e      	movs	r3, #14
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e051      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4a35      	ldr	r2, [pc, #212]	; (8004a8c <USB_SetTurnaroundTime+0x118>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d306      	bcc.n	80049ca <USB_SetTurnaroundTime+0x56>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <USB_SetTurnaroundTime+0x11c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d202      	bcs.n	80049ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049c4:	230d      	movs	r3, #13
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e046      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <USB_SetTurnaroundTime+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d306      	bcc.n	80049e0 <USB_SetTurnaroundTime+0x6c>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <USB_SetTurnaroundTime+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d802      	bhi.n	80049e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049da:	230c      	movs	r3, #12
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e03b      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <USB_SetTurnaroundTime+0x120>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d906      	bls.n	80049f6 <USB_SetTurnaroundTime+0x82>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a2b      	ldr	r2, [pc, #172]	; (8004a98 <USB_SetTurnaroundTime+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d802      	bhi.n	80049f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049f0:	230b      	movs	r3, #11
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e030      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <USB_SetTurnaroundTime+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d906      	bls.n	8004a0c <USB_SetTurnaroundTime+0x98>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <USB_SetTurnaroundTime+0x128>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d802      	bhi.n	8004a0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a06:	230a      	movs	r3, #10
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e025      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <USB_SetTurnaroundTime+0x128>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d906      	bls.n	8004a22 <USB_SetTurnaroundTime+0xae>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <USB_SetTurnaroundTime+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d202      	bcs.n	8004a22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a1c:	2309      	movs	r3, #9
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e01a      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <USB_SetTurnaroundTime+0x12c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d306      	bcc.n	8004a38 <USB_SetTurnaroundTime+0xc4>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <USB_SetTurnaroundTime+0x130>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d802      	bhi.n	8004a38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a32:	2308      	movs	r3, #8
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e00f      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <USB_SetTurnaroundTime+0x130>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d906      	bls.n	8004a4e <USB_SetTurnaroundTime+0xda>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <USB_SetTurnaroundTime+0x134>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d202      	bcs.n	8004a4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a48:	2307      	movs	r3, #7
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e004      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a4e:	2306      	movs	r3, #6
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e001      	b.n	8004a58 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a54:	2309      	movs	r3, #9
 8004a56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	00d8acbf 	.word	0x00d8acbf
 8004a88:	00e4e1c0 	.word	0x00e4e1c0
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	01067380 	.word	0x01067380
 8004a94:	011a499f 	.word	0x011a499f
 8004a98:	01312cff 	.word	0x01312cff
 8004a9c:	014ca43f 	.word	0x014ca43f
 8004aa0:	016e3600 	.word	0x016e3600
 8004aa4:	01a6ab1f 	.word	0x01a6ab1f
 8004aa8:	01e84800 	.word	0x01e84800

08004aac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d106      	bne.n	8004b1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	e00b      	b.n	8004b34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	e001      	b.n	8004b34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e003      	b.n	8004b3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b34:	2032      	movs	r0, #50	; 0x32
 8004b36:	f7fb fff3 	bl	8000b20 <HAL_Delay>

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b44:	b084      	sub	sp, #16
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e009      	b.n	8004b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	3340      	adds	r3, #64	; 0x40
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3301      	adds	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0e      	cmp	r3, #14
 8004b7c:	d9f2      	bls.n	8004b64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11c      	bne.n	8004bbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b92:	f043 0302 	orr.w	r3, r3, #2
 8004b96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e005      	b.n	8004bca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	461a      	mov	r2, r3
 8004be6:	680b      	ldr	r3, [r1, #0]
 8004be8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bea:	2103      	movs	r1, #3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f93d 	bl	8004e6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8f1 	bl	8004ddc <USB_FlushTxFifo>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f90f 	bl	8004e28 <USB_FlushRxFifo>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	461a      	mov	r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e043      	b.n	8004cc6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c54:	d118      	bne.n	8004c88 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e013      	b.n	8004c9a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e008      	b.n	8004c9a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	461a      	mov	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3b7      	bcc.n	8004c3e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e043      	b.n	8004d5c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cea:	d118      	bne.n	8004d1e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e013      	b.n	8004d30 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e008      	b.n	8004d30 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d3b7      	bcc.n	8004cd4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f043 0210 	orr.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <USB_DevInit+0x294>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f043 0208 	orr.w	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd2:	b004      	add	sp, #16
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	803c3800 	.word	0x803c3800

08004ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <USB_FlushTxFifo+0x48>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d0f0      	beq.n	8004df6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2210      	movs	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <USB_FlushRxFifo+0x40>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d0f0      	beq.n	8004e3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	00030d40 	.word	0x00030d40

08004e6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0306 	and.w	r3, r3, #6
 8004eb6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d002      	beq.n	8004ec4 <USB_GetDevSpeed+0x26>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b06      	cmp	r3, #6
 8004ec2:	d102      	bne.n	8004eca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	75fb      	strb	r3, [r7, #23]
 8004ec8:	e001      	b.n	8004ece <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004eca:	230f      	movs	r3, #15
 8004ecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d13a      	bne.n	8004f6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	2101      	movs	r1, #1
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d155      	bne.n	8004fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	059b      	lsls	r3, r3, #22
 8004f52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f54:	4313      	orrs	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e036      	b.n	8004fdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11a      	bne.n	8004fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d161      	bne.n	80050cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501e:	d11f      	bne.n	8005060 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800503e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800505e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	b29b      	uxth	r3, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005080:	4013      	ands	r3, r2
 8005082:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a4:	4013      	ands	r3, r2
 80050a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	0159      	lsls	r1, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	440b      	add	r3, r1
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	4619      	mov	r1, r3
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <USB_DeactivateEndpoint+0x1b0>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]
 80050ca:	e060      	b.n	800518e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e2:	d11f      	bne.n	8005124 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005102:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	43db      	mvns	r3, r3
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005144:	4013      	ands	r3, r2
 8005146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f303 	lsl.w	r3, r1, r3
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	43db      	mvns	r3, r3
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005168:	4013      	ands	r3, r2
 800516a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	0159      	lsls	r1, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	440b      	add	r3, r1
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	4619      	mov	r1, r3
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <USB_DeactivateEndpoint+0x1b4>)
 800518a:	4013      	ands	r3, r2
 800518c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	ec337800 	.word	0xec337800
 80051a0:	eff37800 	.word	0xeff37800

080051a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 810a 	bne.w	80053d6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d132      	bne.n	8005230 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800520c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005228:	0cdb      	lsrs	r3, r3, #19
 800522a:	04db      	lsls	r3, r3, #19
 800522c:	6113      	str	r3, [r2, #16]
 800522e:	e074      	b.n	800531a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524a:	0cdb      	lsrs	r3, r3, #19
 800524c:	04db      	lsls	r3, r3, #19
 800524e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800526e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	440b      	add	r3, r1
 800528c:	1e59      	subs	r1, r3, #1
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	fbb1 f3f3 	udiv	r3, r1, r3
 8005296:	04d9      	lsls	r1, r3, #19
 8005298:	4baf      	ldr	r3, [pc, #700]	; (8005558 <USB_EPStartXfer+0x3b4>)
 800529a:	400b      	ands	r3, r1
 800529c:	6939      	ldr	r1, [r7, #16]
 800529e:	0148      	lsls	r0, r1, #5
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	4401      	add	r1, r0
 80052a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c2:	6939      	ldr	r1, [r7, #16]
 80052c4:	0148      	lsls	r0, r1, #5
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	4401      	add	r1, r0
 80052ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d11f      	bne.n	800531a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005318:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005338:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	78db      	ldrb	r3, [r3, #3]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d015      	beq.n	800536e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8100 	beq.w	800554c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005368:	4313      	orrs	r3, r2
 800536a:	634b      	str	r3, [r1, #52]	; 0x34
 800536c:	e0ee      	b.n	800554c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d110      	bne.n	80053a0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e00f      	b.n	80053c0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053be:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68d9      	ldr	r1, [r3, #12]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f9e2 	bl	8005798 <USB_WritePacket>
 80053d4:	e0ba      	b.n	800554c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f0:	0cdb      	lsrs	r3, r3, #19
 80053f2:	04db      	lsls	r3, r3, #19
 80053f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005414:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005418:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d123      	bne.n	800546a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005438:	6939      	ldr	r1, [r7, #16]
 800543a:	0148      	lsls	r0, r1, #5
 800543c:	6979      	ldr	r1, [r7, #20]
 800543e:	4401      	add	r1, r0
 8005440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005444:	4313      	orrs	r3, r2
 8005446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005466:	6113      	str	r3, [r2, #16]
 8005468:	e033      	b.n	80054d2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	4413      	add	r3, r2
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	89fb      	ldrh	r3, [r7, #14]
 8005490:	04d9      	lsls	r1, r3, #19
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <USB_EPStartXfer+0x3b4>)
 8005494:	400b      	ands	r3, r1
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	0148      	lsls	r0, r1, #5
 800549a:	6979      	ldr	r1, [r7, #20]
 800549c:	4401      	add	r1, r0
 800549e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	89f9      	ldrh	r1, [r7, #14]
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c2:	6939      	ldr	r1, [r7, #16]
 80054c4:	0148      	lsls	r0, r1, #5
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	4401      	add	r1, r0
 80054ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	78db      	ldrb	r3, [r3, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d128      	bne.n	800552c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d110      	bne.n	800550c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00f      	b.n	800552c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800554a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	1ff80000 	.word	0x1ff80000

0800555c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 80ab 	bne.w	80056d0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d132      	bne.n	80055e8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	0cdb      	lsrs	r3, r3, #19
 80055e2:	04db      	lsls	r3, r3, #19
 80055e4:	6113      	str	r3, [r2, #16]
 80055e6:	e04e      	b.n	8005686 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	0cdb      	lsrs	r3, r3, #19
 8005604:	04db      	lsls	r3, r3, #19
 8005606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800562a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d903      	bls.n	8005640 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800565e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	0148      	lsls	r0, r1, #5
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	4401      	add	r1, r0
 800567e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056a4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d06d      	beq.n	800578a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ca:	4313      	orrs	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	; 0x34
 80056ce:	e05c      	b.n	800578a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ea:	0cdb      	lsrs	r3, r3, #19
 80056ec:	04db      	lsls	r3, r3, #19
 80056ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005712:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005742:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	0148      	lsls	r0, r1, #5
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	4401      	add	r1, r0
 8005762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005788:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4611      	mov	r1, r2
 80057a4:	461a      	mov	r2, r3
 80057a6:	460b      	mov	r3, r1
 80057a8:	71fb      	strb	r3, [r7, #7]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80057b6:	88bb      	ldrh	r3, [r7, #4]
 80057b8:	3303      	adds	r3, #3
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e00f      	b.n	80057e4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	031a      	lsls	r2, r3, #12
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d0:	461a      	mov	r2, r3
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	3304      	adds	r3, #4
 80057dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3eb      	bcc.n	80057c4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b089      	sub	sp, #36	; 0x24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	4613      	mov	r3, r2
 8005806:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	3303      	adds	r3, #3
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e00b      	b.n	8005836 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	601a      	str	r2, [r3, #0]
    pDest++;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3304      	adds	r3, #4
 800582e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	3301      	adds	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3ef      	bcc.n	800581e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800583e:	69fb      	ldr	r3, [r7, #28]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3724      	adds	r7, #36	; 0x24
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d12c      	bne.n	80058c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	db12      	blt.n	80058a0 <USB_EPSetStall+0x54>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800589e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	e02b      	b.n	800591a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	db12      	blt.n	80058fa <USB_EPSetStall+0xae>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005918:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d128      	bne.n	8005996 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005962:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	78db      	ldrb	r3, [r3, #3]
 8005968:	2b03      	cmp	r3, #3
 800596a:	d003      	beq.n	8005974 <USB_EPClearStall+0x4c>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	78db      	ldrb	r3, [r3, #3]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d138      	bne.n	80059e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e027      	b.n	80059e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d003      	beq.n	80059c6 <USB_EPClearStall+0x9e>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	78db      	ldrb	r3, [r3, #3]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d10f      	bne.n	80059e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f023 0302 	bic.w	r3, r3, #2
 8005a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a9c:	f023 0303 	bic.w	r3, r3, #3
 8005aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005adc:	68fb      	ldr	r3, [r7, #12]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	0c1b      	lsrs	r3, r3, #16
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	b29b      	uxth	r3, r3
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b80:	68bb      	ldr	r3, [r7, #8]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	01db      	lsls	r3, r3, #7
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c24:	f023 0307 	bic.w	r3, r3, #7
 8005c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	333c      	adds	r3, #60	; 0x3c
 8005c5e:	3304      	adds	r3, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <USB_EP0_OutStart+0x8c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d90a      	bls.n	8005c82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7c:	d101      	bne.n	8005c82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e024      	b.n	8005ccc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb0:	f043 0318 	orr.w	r3, r3, #24
 8005cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cc8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	4f54300a 	.word	0x4f54300a

08005cdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <USB_CoreReset+0x64>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e01b      	b.n	8005d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	daf2      	bge.n	8005ce8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <USB_CoreReset+0x64>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d901      	bls.n	8005d24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d0f0      	beq.n	8005d12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	00030d40 	.word	0x00030d40

08005d44 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005d50:	2010      	movs	r0, #16
 8005d52:	f002 f89d 	bl	8007e90 <USBD_static_malloc>
 8005d56:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d66:	2302      	movs	r3, #2
 8005d68:	e01b      	b.n	8005da2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7c1b      	ldrb	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005d80:	e002      	b.n	8005d88 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	220a      	movs	r2, #10
 8005d86:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005d88:	2304      	movs	r3, #4
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	2181      	movs	r1, #129	; 0x81
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fe7e 	bl	8007a90 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005db6:	2181      	movs	r1, #129	; 0x81
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fea7 	bl	8007b0c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 f866 	bl	8007eac <USBD_static_free>
    pdev->pClassData = NULL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e04:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e0e8      	b.n	8005fea <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d046      	beq.n	8005eb2 <USBD_HID_Setup+0xbe>
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	f040 80d8 	bne.w	8005fda <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	2b09      	cmp	r3, #9
 8005e32:	d836      	bhi.n	8005ea2 <USBD_HID_Setup+0xae>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <USBD_HID_Setup+0x48>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e93 	.word	0x08005e93
 8005e40:	08005e73 	.word	0x08005e73
 8005e44:	08005ea3 	.word	0x08005ea3
 8005e48:	08005ea3 	.word	0x08005ea3
 8005e4c:	08005ea3 	.word	0x08005ea3
 8005e50:	08005ea3 	.word	0x08005ea3
 8005e54:	08005ea3 	.word	0x08005ea3
 8005e58:	08005ea3 	.word	0x08005ea3
 8005e5c:	08005e81 	.word	0x08005e81
 8005e60:	08005e65 	.word	0x08005e65
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	885b      	ldrh	r3, [r3, #2]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	601a      	str	r2, [r3, #0]
          break;
 8005e70:	e01e      	b.n	8005eb0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fa4c 	bl	8007316 <USBD_CtlSendData>
          break;
 8005e7e:	e017      	b.n	8005eb0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	885b      	ldrh	r3, [r3, #2]
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]
          break;
 8005e90:	e00e      	b.n	8005eb0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3304      	adds	r3, #4
 8005e96:	2201      	movs	r2, #1
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fa3b 	bl	8007316 <USBD_CtlSendData>
          break;
 8005ea0:	e006      	b.n	8005eb0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 f9c5 	bl	8007234 <USBD_CtlError>
          ret = USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	75fb      	strb	r3, [r7, #23]
          break;
 8005eae:	bf00      	nop
      }
      break;
 8005eb0:	e09a      	b.n	8005fe8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	f200 8086 	bhi.w	8005fc8 <USBD_HID_Setup+0x1d4>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <USBD_HID_Setup+0xd0>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ef5 	.word	0x08005ef5
 8005ec8:	08005fd7 	.word	0x08005fd7
 8005ecc:	08005fc9 	.word	0x08005fc9
 8005ed0:	08005fc9 	.word	0x08005fc9
 8005ed4:	08005fc9 	.word	0x08005fc9
 8005ed8:	08005fc9 	.word	0x08005fc9
 8005edc:	08005f1f 	.word	0x08005f1f
 8005ee0:	08005fc9 	.word	0x08005fc9
 8005ee4:	08005fc9 	.word	0x08005fc9
 8005ee8:	08005fc9 	.word	0x08005fc9
 8005eec:	08005f77 	.word	0x08005f77
 8005ef0:	08005fa1 	.word	0x08005fa1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d107      	bne.n	8005f10 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f00:	f107 030a 	add.w	r3, r7, #10
 8005f04:	2202      	movs	r2, #2
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fa04 	bl	8007316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f0e:	e063      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 f98e 	bl	8007234 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1c:	e05c      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	885b      	ldrh	r3, [r3, #2]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b22      	cmp	r3, #34	; 0x22
 8005f28:	d108      	bne.n	8005f3c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8005f30:	bf28      	it	cs
 8005f32:	233f      	movcs	r3, #63	; 0x3f
 8005f34:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005f36:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <USBD_HID_Setup+0x200>)
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e015      	b.n	8005f68 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	885b      	ldrh	r3, [r3, #2]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b21      	cmp	r3, #33	; 0x21
 8005f46:	d108      	bne.n	8005f5a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <USBD_HID_Setup+0x204>)
 8005f4a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	88db      	ldrh	r3, [r3, #6]
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	bf28      	it	cs
 8005f54:	2309      	movcs	r3, #9
 8005f56:	82bb      	strh	r3, [r7, #20]
 8005f58:	e006      	b.n	8005f68 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f969 	bl	8007234 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f62:	2303      	movs	r3, #3
 8005f64:	75fb      	strb	r3, [r7, #23]
            break;
 8005f66:	e037      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f68:	8abb      	ldrh	r3, [r7, #20]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6939      	ldr	r1, [r7, #16]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 f9d1 	bl	8007316 <USBD_CtlSendData>
          break;
 8005f74:	e030      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d107      	bne.n	8005f92 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3308      	adds	r3, #8
 8005f86:	2201      	movs	r2, #1
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 f9c3 	bl	8007316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f90:	e022      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 f94d 	bl	8007234 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f9e:	e01b      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d106      	bne.n	8005fba <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	885b      	ldrh	r3, [r3, #2]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fb8:	e00e      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 f939 	bl	8007234 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc6:	e007      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 f932 	bl	8007234 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd4:	e000      	b.n	8005fd8 <USBD_HID_Setup+0x1e4>
          break;
 8005fd6:	bf00      	nop
      }
      break;
 8005fd8:	e006      	b.n	8005fe8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 f929 	bl	8007234 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200000c8 	.word	0x200000c8
 8005ff8:	200000b0 	.word	0x200000b0

08005ffc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006010:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e013      	b.n	8006044 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d10c      	bne.n	8006042 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	7b1b      	ldrb	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2201      	movs	r2, #1
 8006034:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	2181      	movs	r1, #129	; 0x81
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f001 fe69 	bl	8007d14 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2222      	movs	r2, #34	; 0x22
 8006058:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800605a:	4b03      	ldr	r3, [pc, #12]	; (8006068 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000044 	.word	0x20000044

0800606c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2222      	movs	r2, #34	; 0x22
 8006078:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800607a:	4b03      	ldr	r3, [pc, #12]	; (8006088 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	20000068 	.word	0x20000068

0800608c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2222      	movs	r2, #34	; 0x22
 8006098:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800609a:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	2000008c 	.word	0x2000008c

080060ac <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060be:	2200      	movs	r2, #0
 80060c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	220a      	movs	r2, #10
 80060dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80060de:	4b03      	ldr	r3, [pc, #12]	; (80060ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	200000bc 	.word	0x200000bc

080060f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006104:	2303      	movs	r3, #3
 8006106:	e01f      	b.n	8006148 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	79fa      	ldrb	r2, [r7, #7]
 800613a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f001 fc29 	bl	8007994 <USBD_LL_Init>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	e016      	b.n	8006196 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	f107 020e 	add.w	r2, r7, #14
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fc40 	bl	8007a2c <USBD_LL_Start>
 80061ac:	4603      	mov	r3, r0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	4611      	mov	r1, r2
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
  }

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 ffba 	bl	80071c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800625a:	461a      	mov	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2b02      	cmp	r3, #2
 800626e:	d01a      	beq.n	80062a6 <USBD_LL_SetupStage+0x72>
 8006270:	2b02      	cmp	r3, #2
 8006272:	d822      	bhi.n	80062ba <USBD_LL_SetupStage+0x86>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <USBD_LL_SetupStage+0x4a>
 8006278:	2b01      	cmp	r3, #1
 800627a:	d00a      	beq.n	8006292 <USBD_LL_SetupStage+0x5e>
 800627c:	e01d      	b.n	80062ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa62 	bl	8006750 <USBD_StdDevReq>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	e020      	b.n	80062d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fac6 	bl	800682c <USBD_StdItfReq>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e016      	b.n	80062d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb05 	bl	80068be <USBD_StdEPReq>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]
      break;
 80062b8:	e00c      	b.n	80062d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fc55 	bl	8007b78 <USBD_LL_StallEP>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]
      break;
 80062d2:	bf00      	nop
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	460b      	mov	r3, r1
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062ec:	7afb      	ldrb	r3, [r7, #11]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d138      	bne.n	8006364 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006300:	2b03      	cmp	r3, #3
 8006302:	d14a      	bne.n	800639a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d913      	bls.n	8006338 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	4293      	cmp	r3, r2
 8006328:	bf28      	it	cs
 800632a:	4613      	movcs	r3, r2
 800632c:	461a      	mov	r2, r3
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f001 f81c 	bl	800736e <USBD_CtlContinueRx>
 8006336:	e030      	b.n	800639a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d10b      	bne.n	800635c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f001 f817 	bl	8007390 <USBD_CtlSendStatus>
 8006362:	e01a      	b.n	800639a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d114      	bne.n	800639a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	7afa      	ldrb	r2, [r7, #11]
 8006386:	4611      	mov	r1, r2
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	4798      	blx	r3
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	e000      	b.n	800639c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	460b      	mov	r3, r1
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d16b      	bne.n	8006490 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3314      	adds	r3, #20
 80063bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d156      	bne.n	8006476 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d914      	bls.n	80063fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 ffae 	bl	800734c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f0:	2300      	movs	r3, #0
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f001 fcc4 	bl	8007d84 <USBD_LL_PrepareReceive>
 80063fc:	e03b      	b.n	8006476 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d11c      	bne.n	8006444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006412:	429a      	cmp	r2, r3
 8006414:	d316      	bcc.n	8006444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006420:	429a      	cmp	r2, r3
 8006422:	d20f      	bcs.n	8006444 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 ff8f 	bl	800734c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006436:	2300      	movs	r3, #0
 8006438:	2200      	movs	r2, #0
 800643a:	2100      	movs	r1, #0
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 fca1 	bl	8007d84 <USBD_LL_PrepareReceive>
 8006442:	e018      	b.n	8006476 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b03      	cmp	r3, #3
 800644e:	d10b      	bne.n	8006468 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006468:	2180      	movs	r1, #128	; 0x80
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 fb84 	bl	8007b78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 ffa0 	bl	80073b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800647c:	2b01      	cmp	r3, #1
 800647e:	d122      	bne.n	80064c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff fe98 	bl	80061b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800648e:	e01a      	b.n	80064c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d114      	bne.n	80064c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	7afa      	ldrb	r2, [r7, #11]
 80064b2:	4611      	mov	r1, r2
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	e000      	b.n	80064c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	e02f      	b.n	8006564 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00f      	beq.n	800652e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6852      	ldr	r2, [r2, #4]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	4611      	mov	r1, r2
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	2200      	movs	r2, #0
 8006532:	2100      	movs	r1, #0
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 faab 	bl	8007a90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2240      	movs	r2, #64	; 0x40
 8006546:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	2200      	movs	r2, #0
 800654e:	2180      	movs	r1, #128	; 0x80
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fa9d 	bl	8007a90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2240      	movs	r2, #64	; 0x40
 8006560:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659a:	b2da      	uxtb	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2204      	movs	r2, #4
 80065a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d106      	bne.n	80065da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e012      	b.n	8006624 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d10b      	bne.n	8006622 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	e014      	b.n	8006670 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d10d      	bne.n	800666e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	4611      	mov	r1, r2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	e014      	b.n	80066bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d10d      	bne.n	80066ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4611      	mov	r1, r2
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6852      	ldr	r2, [r2, #4]
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	4611      	mov	r1, r2
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
  }

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3301      	adds	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006730:	8a3b      	ldrh	r3, [r7, #16]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	b21a      	sxth	r2, r3
 8006736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800673a:	4313      	orrs	r3, r2
 800673c:	b21b      	sxth	r3, r3
 800673e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006740:	89fb      	ldrh	r3, [r7, #14]
}
 8006742:	4618      	mov	r0, r3
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d005      	beq.n	8006776 <USBD_StdDevReq+0x26>
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d853      	bhi.n	8006816 <USBD_StdDevReq+0xc6>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <USBD_StdDevReq+0x3a>
 8006772:	2b20      	cmp	r3, #32
 8006774:	d14f      	bne.n	8006816 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e04a      	b.n	8006820 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b09      	cmp	r3, #9
 8006790:	d83b      	bhi.n	800680a <USBD_StdDevReq+0xba>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <USBD_StdDevReq+0x48>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067ed 	.word	0x080067ed
 800679c:	08006801 	.word	0x08006801
 80067a0:	0800680b 	.word	0x0800680b
 80067a4:	080067f7 	.word	0x080067f7
 80067a8:	0800680b 	.word	0x0800680b
 80067ac:	080067cb 	.word	0x080067cb
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	0800680b 	.word	0x0800680b
 80067b8:	080067e3 	.word	0x080067e3
 80067bc:	080067d5 	.word	0x080067d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9de 	bl	8006b84 <USBD_GetDescriptor>
          break;
 80067c8:	e024      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb6d 	bl	8006eac <USBD_SetAddress>
          break;
 80067d2:	e01f      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fbac 	bl	8006f34 <USBD_SetConfig>
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
          break;
 80067e0:	e018      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fc4b 	bl	8007080 <USBD_GetConfig>
          break;
 80067ea:	e013      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc7c 	bl	80070ec <USBD_GetStatus>
          break;
 80067f4:	e00e      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fcab 	bl	8007154 <USBD_SetFeature>
          break;
 80067fe:	e009      	b.n	8006814 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fcba 	bl	800717c <USBD_ClrFeature>
          break;
 8006808:	e004      	b.n	8006814 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fd11 	bl	8007234 <USBD_CtlError>
          break;
 8006812:	bf00      	nop
      }
      break;
 8006814:	e004      	b.n	8006820 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fd0b 	bl	8007234 <USBD_CtlError>
      break;
 800681e:	bf00      	nop
  }

  return ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop

0800682c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d005      	beq.n	8006852 <USBD_StdItfReq+0x26>
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d82f      	bhi.n	80068aa <USBD_StdItfReq+0x7e>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <USBD_StdItfReq+0x26>
 800684e:	2b20      	cmp	r3, #32
 8006850:	d12b      	bne.n	80068aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	2b02      	cmp	r3, #2
 800685e:	d81d      	bhi.n	800689c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	889b      	ldrh	r3, [r3, #4]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d813      	bhi.n	8006892 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	88db      	ldrh	r3, [r3, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d110      	bne.n	80068a6 <USBD_StdItfReq+0x7a>
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fd80 	bl	8007390 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006890:	e009      	b.n	80068a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fccd 	bl	8007234 <USBD_CtlError>
          break;
 800689a:	e004      	b.n	80068a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcc8 	bl	8007234 <USBD_CtlError>
          break;
 80068a4:	e000      	b.n	80068a8 <USBD_StdItfReq+0x7c>
          break;
 80068a6:	bf00      	nop
      }
      break;
 80068a8:	e004      	b.n	80068b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fcc1 	bl	8007234 <USBD_CtlError>
      break;
 80068b2:	bf00      	nop
  }

  return ret;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	889b      	ldrh	r3, [r3, #4]
 80068d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d007      	beq.n	80068ee <USBD_StdEPReq+0x30>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	f200 8145 	bhi.w	8006b6e <USBD_StdEPReq+0x2b0>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00c      	beq.n	8006902 <USBD_StdEPReq+0x44>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	f040 8140 	bne.w	8006b6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e13a      	b.n	8006b78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d007      	beq.n	800691a <USBD_StdEPReq+0x5c>
 800690a:	2b03      	cmp	r3, #3
 800690c:	f300 8129 	bgt.w	8006b62 <USBD_StdEPReq+0x2a4>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d07f      	beq.n	8006a14 <USBD_StdEPReq+0x156>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d03c      	beq.n	8006992 <USBD_StdEPReq+0xd4>
 8006918:	e123      	b.n	8006b62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d002      	beq.n	800692c <USBD_StdEPReq+0x6e>
 8006926:	2b03      	cmp	r3, #3
 8006928:	d016      	beq.n	8006958 <USBD_StdEPReq+0x9a>
 800692a:	e02c      	b.n	8006986 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00d      	beq.n	800694e <USBD_StdEPReq+0x90>
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b80      	cmp	r3, #128	; 0x80
 8006936:	d00a      	beq.n	800694e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 f91b 	bl	8007b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f917 	bl	8007b78 <USBD_LL_StallEP>
 800694a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800694c:	e020      	b.n	8006990 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fc6f 	bl	8007234 <USBD_CtlError>
              break;
 8006956:	e01b      	b.n	8006990 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	885b      	ldrh	r3, [r3, #2]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10e      	bne.n	800697e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <USBD_StdEPReq+0xc0>
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	2b80      	cmp	r3, #128	; 0x80
 800696a:	d008      	beq.n	800697e <USBD_StdEPReq+0xc0>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	88db      	ldrh	r3, [r3, #6]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f8fd 	bl	8007b78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fd06 	bl	8007390 <USBD_CtlSendStatus>

              break;
 8006984:	e004      	b.n	8006990 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc53 	bl	8007234 <USBD_CtlError>
              break;
 800698e:	bf00      	nop
          }
          break;
 8006990:	e0ec      	b.n	8006b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d002      	beq.n	80069a4 <USBD_StdEPReq+0xe6>
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d016      	beq.n	80069d0 <USBD_StdEPReq+0x112>
 80069a2:	e030      	b.n	8006a06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <USBD_StdEPReq+0x108>
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d00a      	beq.n	80069c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f8df 	bl	8007b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ba:	2180      	movs	r1, #128	; 0x80
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 f8db 	bl	8007b78 <USBD_LL_StallEP>
 80069c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069c4:	e025      	b.n	8006a12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fc33 	bl	8007234 <USBD_CtlError>
              break;
 80069ce:	e020      	b.n	8006a12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	885b      	ldrh	r3, [r3, #2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11b      	bne.n	8006a10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f8fc 	bl	8007be4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fccf 	bl	8007390 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006a04:	e004      	b.n	8006a10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fc13 	bl	8007234 <USBD_CtlError>
              break;
 8006a0e:	e000      	b.n	8006a12 <USBD_StdEPReq+0x154>
              break;
 8006a10:	bf00      	nop
          }
          break;
 8006a12:	e0ab      	b.n	8006b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d002      	beq.n	8006a26 <USBD_StdEPReq+0x168>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d032      	beq.n	8006a8a <USBD_StdEPReq+0x1cc>
 8006a24:	e097      	b.n	8006b56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <USBD_StdEPReq+0x17e>
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d004      	beq.n	8006a3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fbfd 	bl	8007234 <USBD_CtlError>
                break;
 8006a3a:	e091      	b.n	8006b60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da0b      	bge.n	8006a5c <USBD_StdEPReq+0x19e>
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	3310      	adds	r3, #16
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	3304      	adds	r3, #4
 8006a5a:	e00b      	b.n	8006a74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fc47 	bl	8007316 <USBD_CtlSendData>
              break;
 8006a88:	e06a      	b.n	8006b60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	da11      	bge.n	8006ab6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3324      	adds	r3, #36	; 0x24
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d117      	bne.n	8006adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fbc0 	bl	8007234 <USBD_CtlError>
                  break;
 8006ab4:	e054      	b.n	8006b60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fbad 	bl	8007234 <USBD_CtlError>
                  break;
 8006ada:	e041      	b.n	8006b60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da0b      	bge.n	8006afc <USBD_StdEPReq+0x23e>
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	3310      	adds	r3, #16
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	3304      	adds	r3, #4
 8006afa:	e00b      	b.n	8006b14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	3304      	adds	r3, #4
 8006b14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <USBD_StdEPReq+0x264>
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b80      	cmp	r3, #128	; 0x80
 8006b20:	d103      	bne.n	8006b2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e00e      	b.n	8006b48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 f88e 	bl	8007c50 <USBD_LL_IsStallEP>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fbe1 	bl	8007316 <USBD_CtlSendData>
              break;
 8006b54:	e004      	b.n	8006b60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb6b 	bl	8007234 <USBD_CtlError>
              break;
 8006b5e:	bf00      	nop
          }
          break;
 8006b60:	e004      	b.n	8006b6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fb65 	bl	8007234 <USBD_CtlError>
          break;
 8006b6a:	bf00      	nop
      }
      break;
 8006b6c:	e004      	b.n	8006b78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb5f 	bl	8007234 <USBD_CtlError>
      break;
 8006b76:	bf00      	nop
  }

  return ret;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b0e      	cmp	r3, #14
 8006ba6:	f200 8152 	bhi.w	8006e4e <USBD_GetDescriptor+0x2ca>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <USBD_GetDescriptor+0x2c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c21 	.word	0x08006c21
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c79 	.word	0x08006c79
 8006bbc:	08006e4f 	.word	0x08006e4f
 8006bc0:	08006e4f 	.word	0x08006e4f
 8006bc4:	08006def 	.word	0x08006def
 8006bc8:	08006e1b 	.word	0x08006e1b
 8006bcc:	08006e4f 	.word	0x08006e4f
 8006bd0:	08006e4f 	.word	0x08006e4f
 8006bd4:	08006e4f 	.word	0x08006e4f
 8006bd8:	08006e4f 	.word	0x08006e4f
 8006bdc:	08006e4f 	.word	0x08006e4f
 8006be0:	08006e4f 	.word	0x08006e4f
 8006be4:	08006e4f 	.word	0x08006e4f
 8006be8:	08006bed 	.word	0x08006bed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c0e:	e126      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb0e 	bl	8007234 <USBD_CtlError>
        err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1e:	e11e      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7c12      	ldrb	r2, [r2, #16]
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
      break;
 8006c36:	e112      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7c1b      	ldrb	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f107 0208 	add.w	r2, r7, #8
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	2202      	movs	r2, #2
 8006c58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c5a:	e100      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	f107 0208 	add.w	r2, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2202      	movs	r2, #2
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e0f2      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	885b      	ldrh	r3, [r3, #2]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	f200 80ac 	bhi.w	8006ddc <USBD_GetDescriptor+0x258>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_GetDescriptor+0x108>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006cd9 	.word	0x08006cd9
 8006c94:	08006d0d 	.word	0x08006d0d
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d75 	.word	0x08006d75
 8006ca0:	08006da9 	.word	0x08006da9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc6:	e091      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fab2 	bl	8007234 <USBD_CtlError>
            err++;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd6:	e089      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7c12      	ldrb	r2, [r2, #16]
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfa:	e077      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa98 	bl	8007234 <USBD_CtlError>
            err++;
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	3301      	adds	r3, #1
 8006d08:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0a:	e06f      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7c12      	ldrb	r2, [r2, #16]
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2e:	e05d      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa7e 	bl	8007234 <USBD_CtlError>
            err++;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3e:	e055      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d62:	e043      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa64 	bl	8007234 <USBD_CtlError>
            err++;
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	72fb      	strb	r3, [r7, #11]
          break;
 8006d72:	e03b      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d96:	e029      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa4a 	bl	8007234 <USBD_CtlError>
            err++;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	3301      	adds	r3, #1
 8006da4:	72fb      	strb	r3, [r7, #11]
          break;
 8006da6:	e021      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	7c12      	ldrb	r2, [r2, #16]
 8006dc0:	f107 0108 	add.w	r1, r7, #8
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
 8006dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dca:	e00f      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa30 	bl	8007234 <USBD_CtlError>
            err++;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dda:	e007      	b.n	8006dec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa28 	bl	8007234 <USBD_CtlError>
          err++;
 8006de4:	7afb      	ldrb	r3, [r7, #11]
 8006de6:	3301      	adds	r3, #1
 8006de8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006dea:	bf00      	nop
      }
      break;
 8006dec:	e037      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7c1b      	ldrb	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfe:	f107 0208 	add.w	r2, r7, #8
 8006e02:	4610      	mov	r0, r2
 8006e04:	4798      	blx	r3
 8006e06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e08:	e029      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa11 	bl	8007234 <USBD_CtlError>
        err++;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	3301      	adds	r3, #1
 8006e16:	72fb      	strb	r3, [r7, #11]
      break;
 8006e18:	e021      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	f107 0208 	add.w	r2, r7, #8
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4798      	blx	r3
 8006e32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	2207      	movs	r2, #7
 8006e3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e3c:	e00f      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f9f7 	bl	8007234 <USBD_CtlError>
        err++;
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e4c:	e007      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f9ef 	bl	8007234 <USBD_CtlError>
      err++;
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e5c:	bf00      	nop
  }

  if (err != 0U)
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11e      	bne.n	8006ea2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	88db      	ldrh	r3, [r3, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d016      	beq.n	8006e9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e6c:	893b      	ldrh	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	88da      	ldrh	r2, [r3, #6]
 8006e76:	893b      	ldrh	r3, [r7, #8]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bf28      	it	cs
 8006e7c:	4613      	movcs	r3, r2
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	461a      	mov	r2, r3
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa44 	bl	8007316 <USBD_CtlSendData>
 8006e8e:	e009      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f9ce 	bl	8007234 <USBD_CtlError>
 8006e98:	e004      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa78 	bl	8007390 <USBD_CtlSendStatus>
 8006ea0:	e000      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    return;
 8006ea2:	bf00      	nop
  }
}
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	889b      	ldrh	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d131      	bne.n	8006f22 <USBD_SetAddress+0x76>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d12d      	bne.n	8006f22 <USBD_SetAddress+0x76>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ecc:	d829      	bhi.n	8006f22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	885b      	ldrh	r3, [r3, #2]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d104      	bne.n	8006ef0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9a3 	bl	8007234 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	e01d      	b.n	8006f2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	7bfa      	ldrb	r2, [r7, #15]
 8006ef4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fed3 	bl	8007ca8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa44 	bl	8007390 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f16:	e009      	b.n	8006f2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	e004      	b.n	8006f2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f985 	bl	8007234 <USBD_CtlError>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	885b      	ldrh	r3, [r3, #2]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b4c      	ldr	r3, [pc, #304]	; (800707c <USBD_SetConfig+0x148>)
 8006f4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f4c:	4b4b      	ldr	r3, [pc, #300]	; (800707c <USBD_SetConfig+0x148>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d905      	bls.n	8006f60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f96c 	bl	8007234 <USBD_CtlError>
    return USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e088      	b.n	8007072 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d002      	beq.n	8006f72 <USBD_SetConfig+0x3e>
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d025      	beq.n	8006fbc <USBD_SetConfig+0x88>
 8006f70:	e071      	b.n	8007056 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f72:	4b42      	ldr	r3, [pc, #264]	; (800707c <USBD_SetConfig+0x148>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01c      	beq.n	8006fb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006f7a:	4b40      	ldr	r3, [pc, #256]	; (800707c <USBD_SetConfig+0x148>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <USBD_SetConfig+0x148>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff f91e 	bl	80061cc <USBD_SetClassConfig>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f949 	bl	8007234 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fa2:	e065      	b.n	8007070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f9f3 	bl	8007390 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2203      	movs	r2, #3
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fb2:	e05d      	b.n	8007070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9eb 	bl	8007390 <USBD_CtlSendStatus>
      break;
 8006fba:	e059      	b.n	8007070 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fbc:	4b2f      	ldr	r3, [pc, #188]	; (800707c <USBD_SetConfig+0x148>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d112      	bne.n	8006fea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	; (800707c <USBD_SetConfig+0x148>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fd6:	4b29      	ldr	r3, [pc, #164]	; (800707c <USBD_SetConfig+0x148>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff f911 	bl	8006204 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9d4 	bl	8007390 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fe8:	e042      	b.n	8007070 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006fea:	4b24      	ldr	r3, [pc, #144]	; (800707c <USBD_SetConfig+0x148>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d02a      	beq.n	800704e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f8ff 	bl	8006204 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007006:	4b1d      	ldr	r3, [pc, #116]	; (800707c <USBD_SetConfig+0x148>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007010:	4b1a      	ldr	r3, [pc, #104]	; (800707c <USBD_SetConfig+0x148>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff f8d8 	bl	80061cc <USBD_SetClassConfig>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00f      	beq.n	8007046 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f903 	bl	8007234 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff f8e4 	bl	8006204 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007044:	e014      	b.n	8007070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9a2 	bl	8007390 <USBD_CtlSendStatus>
      break;
 800704c:	e010      	b.n	8007070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f99e 	bl	8007390 <USBD_CtlSendStatus>
      break;
 8007054:	e00c      	b.n	8007070 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8eb 	bl	8007234 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800705e:	4b07      	ldr	r3, [pc, #28]	; (800707c <USBD_SetConfig+0x148>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff f8cd 	bl	8006204 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	bf00      	nop
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	200001ec 	.word	0x200001ec

08007080 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	88db      	ldrh	r3, [r3, #6]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d004      	beq.n	800709c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f8cd 	bl	8007234 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800709a:	e023      	b.n	80070e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	dc02      	bgt.n	80070ae <USBD_GetConfig+0x2e>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dc03      	bgt.n	80070b4 <USBD_GetConfig+0x34>
 80070ac:	e015      	b.n	80070da <USBD_GetConfig+0x5a>
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d00b      	beq.n	80070ca <USBD_GetConfig+0x4a>
 80070b2:	e012      	b.n	80070da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3308      	adds	r3, #8
 80070be:	2201      	movs	r2, #1
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f927 	bl	8007316 <USBD_CtlSendData>
        break;
 80070c8:	e00c      	b.n	80070e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2201      	movs	r2, #1
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f91f 	bl	8007316 <USBD_CtlSendData>
        break;
 80070d8:	e004      	b.n	80070e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8a9 	bl	8007234 <USBD_CtlError>
        break;
 80070e2:	bf00      	nop
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	2b02      	cmp	r3, #2
 8007102:	d81e      	bhi.n	8007142 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	88db      	ldrh	r3, [r3, #6]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d004      	beq.n	8007116 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f890 	bl	8007234 <USBD_CtlError>
        break;
 8007114:	e01a      	b.n	800714c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	330c      	adds	r3, #12
 8007136:	2202      	movs	r2, #2
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8eb 	bl	8007316 <USBD_CtlSendData>
      break;
 8007140:	e004      	b.n	800714c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f875 	bl	8007234 <USBD_CtlError>
      break;
 800714a:	bf00      	nop
  }
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	885b      	ldrh	r3, [r3, #2]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d106      	bne.n	8007174 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f90e 	bl	8007390 <USBD_CtlSendStatus>
  }
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	2b02      	cmp	r3, #2
 8007192:	d80b      	bhi.n	80071ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	885b      	ldrh	r3, [r3, #2]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d10c      	bne.n	80071b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8f3 	bl	8007390 <USBD_CtlSendStatus>
      }
      break;
 80071aa:	e004      	b.n	80071b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f840 	bl	8007234 <USBD_CtlError>
      break;
 80071b4:	e000      	b.n	80071b8 <USBD_ClrFeature+0x3c>
      break;
 80071b6:	bf00      	nop
  }
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781a      	ldrb	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fa91 	bl	8006712 <SWAPBYTE>
 80071f0:	4603      	mov	r3, r0
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff fa84 	bl	8006712 <SWAPBYTE>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fa77 	bl	8006712 <SWAPBYTE>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	80da      	strh	r2, [r3, #6]
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc99 	bl	8007b78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007246:	2100      	movs	r1, #0
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc95 	bl	8007b78 <USBD_LL_StallEP>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d036      	beq.n	80072da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007270:	6938      	ldr	r0, [r7, #16]
 8007272:	f000 f836 	bl	80072e2 <USBD_GetLen>
 8007276:	4603      	mov	r3, r0
 8007278:	3301      	adds	r3, #1
 800727a:	b29b      	uxth	r3, r3
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	7812      	ldrb	r2, [r2, #0]
 800728e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	3301      	adds	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4413      	add	r3, r2
 800729c:	2203      	movs	r2, #3
 800729e:	701a      	strb	r2, [r3, #0]
  idx++;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	3301      	adds	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072a6:	e013      	b.n	80072d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3301      	adds	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
    idx++;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	3301      	adds	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	3301      	adds	r3, #1
 80072ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e7      	bne.n	80072a8 <USBD_GetString+0x52>
 80072d8:	e000      	b.n	80072dc <USBD_GetString+0x86>
    return;
 80072da:	bf00      	nop
  }
}
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072f2:	e005      	b.n	8007300 <USBD_GetLen+0x1e>
  {
    len++;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	3301      	adds	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f5      	bne.n	80072f4 <USBD_GetLen+0x12>
  }

  return len;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2202      	movs	r2, #2
 8007326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	2100      	movs	r1, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fce9 	bl	8007d14 <USBD_LL_Transmit>

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fcd8 	bl	8007d14 <USBD_LL_Transmit>

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fcff 	bl	8007d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2204      	movs	r2, #4
 800739c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073a0:	2300      	movs	r3, #0
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fcb4 	bl	8007d14 <USBD_LL_Transmit>

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2205      	movs	r2, #5
 80073c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fcd9 	bl	8007d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073e0:	2200      	movs	r2, #0
 80073e2:	490e      	ldr	r1, [pc, #56]	; (800741c <MX_USB_DEVICE_Init+0x40>)
 80073e4:	480e      	ldr	r0, [pc, #56]	; (8007420 <MX_USB_DEVICE_Init+0x44>)
 80073e6:	f7fe fe83 	bl	80060f0 <USBD_Init>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073f0:	f7f9 f9dc 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80073f4:	490b      	ldr	r1, [pc, #44]	; (8007424 <MX_USB_DEVICE_Init+0x48>)
 80073f6:	480a      	ldr	r0, [pc, #40]	; (8007420 <MX_USB_DEVICE_Init+0x44>)
 80073f8:	f7fe feaa 	bl	8006150 <USBD_RegisterClass>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007402:	f7f9 f9d3 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007406:	4806      	ldr	r0, [pc, #24]	; (8007420 <MX_USB_DEVICE_Init+0x44>)
 8007408:	f7fe fec9 	bl	800619e <USBD_Start>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007412:	f7f9 f9cb 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000108 	.word	0x20000108
 8007420:	20000358 	.word	0x20000358
 8007424:	2000000c 	.word	0x2000000c

08007428 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2212      	movs	r2, #18
 8007438:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_FS_DeviceDescriptor+0x20>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000128 	.word	0x20000128

0800744c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2204      	movs	r2, #4
 800745c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800745e:	4b03      	ldr	r3, [pc, #12]	; (800746c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20000148 	.word	0x20000148

08007470 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4907      	ldr	r1, [pc, #28]	; (80074a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007486:	4808      	ldr	r0, [pc, #32]	; (80074a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007488:	f7ff fee5 	bl	8007256 <USBD_GetString>
 800748c:	e004      	b.n	8007498 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4904      	ldr	r1, [pc, #16]	; (80074a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007494:	f7ff fedf 	bl	8007256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000628 	.word	0x20000628
 80074a8:	08008068 	.word	0x08008068

080074ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	4904      	ldr	r1, [pc, #16]	; (80074cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074bc:	4804      	ldr	r0, [pc, #16]	; (80074d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074be:	f7ff feca 	bl	8007256 <USBD_GetString>
  return USBD_StrDesc;
 80074c2:	4b02      	ldr	r3, [pc, #8]	; (80074cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000628 	.word	0x20000628
 80074d0:	08008080 	.word	0x08008080

080074d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	221a      	movs	r2, #26
 80074e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074e6:	f000 f855 	bl	8007594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074ea:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	2000014c 	.word	0x2000014c

080074f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	4907      	ldr	r1, [pc, #28]	; (800752c <USBD_FS_ConfigStrDescriptor+0x34>)
 800750e:	4808      	ldr	r0, [pc, #32]	; (8007530 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007510:	f7ff fea1 	bl	8007256 <USBD_GetString>
 8007514:	e004      	b.n	8007520 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	4904      	ldr	r1, [pc, #16]	; (800752c <USBD_FS_ConfigStrDescriptor+0x34>)
 800751a:	4805      	ldr	r0, [pc, #20]	; (8007530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800751c:	f7ff fe9b 	bl	8007256 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007520:	4b02      	ldr	r3, [pc, #8]	; (800752c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000628 	.word	0x20000628
 8007530:	08008094 	.word	0x08008094

08007534 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	6039      	str	r1, [r7, #0]
 800753e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	4907      	ldr	r1, [pc, #28]	; (8007568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800754a:	4808      	ldr	r0, [pc, #32]	; (800756c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800754c:	f7ff fe83 	bl	8007256 <USBD_GetString>
 8007550:	e004      	b.n	800755c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	4904      	ldr	r1, [pc, #16]	; (8007568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007556:	4805      	ldr	r0, [pc, #20]	; (800756c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007558:	f7ff fe7d 	bl	8007256 <USBD_GetString>
  }
  return USBD_StrDesc;
 800755c:	4b02      	ldr	r3, [pc, #8]	; (8007568 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000628 	.word	0x20000628
 800756c:	080080a0 	.word	0x080080a0

08007570 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	220c      	movs	r2, #12
 8007580:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007582:	4b03      	ldr	r3, [pc, #12]	; (8007590 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000013c 	.word	0x2000013c

08007594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <Get_SerialNum+0x44>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <Get_SerialNum+0x48>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075a6:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <Get_SerialNum+0x4c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075ba:	2208      	movs	r2, #8
 80075bc:	4909      	ldr	r1, [pc, #36]	; (80075e4 <Get_SerialNum+0x50>)
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f814 	bl	80075ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075c4:	2204      	movs	r2, #4
 80075c6:	4908      	ldr	r1, [pc, #32]	; (80075e8 <Get_SerialNum+0x54>)
 80075c8:	68b8      	ldr	r0, [r7, #8]
 80075ca:	f000 f80f 	bl	80075ec <IntToUnicode>
  }
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	1fff7590 	.word	0x1fff7590
 80075dc:	1fff7594 	.word	0x1fff7594
 80075e0:	1fff7598 	.word	0x1fff7598
 80075e4:	2000014e 	.word	0x2000014e
 80075e8:	2000015e 	.word	0x2000015e

080075ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
 8007602:	e027      	b.n	8007654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	0f1b      	lsrs	r3, r3, #28
 8007608:	2b09      	cmp	r3, #9
 800760a:	d80b      	bhi.n	8007624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	0f1b      	lsrs	r3, r3, #28
 8007610:	b2da      	uxtb	r2, r3
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	4619      	mov	r1, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	440b      	add	r3, r1
 800761c:	3230      	adds	r2, #48	; 0x30
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e00a      	b.n	800763a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	0f1b      	lsrs	r3, r3, #28
 8007628:	b2da      	uxtb	r2, r3
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	4619      	mov	r1, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	440b      	add	r3, r1
 8007634:	3237      	adds	r2, #55	; 0x37
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	3301      	adds	r3, #1
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4413      	add	r3, r2
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	3301      	adds	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
 8007654:	7dfa      	ldrb	r2, [r7, #23]
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d3d3      	bcc.n	8007604 <IntToUnicode+0x18>
  }
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b0ac      	sub	sp, #176	; 0xb0
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	2288      	movs	r2, #136	; 0x88
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fc47 	bl	8007f20 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769a:	d173      	bne.n	8007784 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800769c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80076a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80076ae:	2301      	movs	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80076b2:	2318      	movs	r3, #24
 80076b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80076b6:	2307      	movs	r3, #7
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80076ba:	2302      	movs	r3, #2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80076be:	2302      	movs	r3, #2
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80076c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fb fbf1 	bl	8002eb4 <HAL_RCCEx_PeriphCLKConfig>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80076d8:	f7f9 f868 	bl	80007ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076dc:	4b2b      	ldr	r3, [pc, #172]	; (800778c <HAL_PCD_MspInit+0x120>)
 80076de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e0:	4a2a      	ldr	r2, [pc, #168]	; (800778c <HAL_PCD_MspInit+0x120>)
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076e8:	4b28      	ldr	r3, [pc, #160]	; (800778c <HAL_PCD_MspInit+0x120>)
 80076ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80076f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80076f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076fc:	2302      	movs	r3, #2
 80076fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007708:	2303      	movs	r3, #3
 800770a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800770e:	230a      	movs	r3, #10
 8007710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007714:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007718:	4619      	mov	r1, r3
 800771a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800771e:	f7f9 fb05 	bl	8000d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007722:	4b1a      	ldr	r3, [pc, #104]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007726:	4a19      	ldr	r2, [pc, #100]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800772c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800772e:	4b17      	ldr	r3, [pc, #92]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <HAL_PCD_MspInit+0x120>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d114      	bne.n	8007770 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	4a10      	ldr	r2, [pc, #64]	; (800778c <HAL_PCD_MspInit+0x120>)
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007750:	6593      	str	r3, [r2, #88]	; 0x58
 8007752:	4b0e      	ldr	r3, [pc, #56]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800775e:	f7fa fd7b 	bl	8002258 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007762:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <HAL_PCD_MspInit+0x120>)
 8007768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776c:	6593      	str	r3, [r2, #88]	; 0x58
 800776e:	e001      	b.n	8007774 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007770:	f7fa fd72 	bl	8002258 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	2043      	movs	r0, #67	; 0x43
 800777a:	f7f9 faad 	bl	8000cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800777e:	2043      	movs	r0, #67	; 0x43
 8007780:	f7f9 fac6 	bl	8000d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007784:	bf00      	nop
 8007786:	37b0      	adds	r7, #176	; 0xb0
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40021000 	.word	0x40021000

08007790 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe fd44 	bl	8006234 <USBD_LL_SetupStage>
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	1a9b      	subs	r3, r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	4619      	mov	r1, r3
 80077de:	f7fe fd7e 	bl	80062de <USBD_LL_DataOutStage>
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80077fc:	78fa      	ldrb	r2, [r7, #3]
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3348      	adds	r3, #72	; 0x48
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe fdc7 	bl	80063a4 <USBD_LL_DataInStage>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fedb 	bl	80065e8 <USBD_LL_SOF>
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007842:	2301      	movs	r3, #1
 8007844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d001      	beq.n	8007852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800784e:	f7f8 ffad 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007858:	7bfa      	ldrb	r2, [r7, #15]
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe fe85 	bl	800656c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe fe31 	bl	80064d0 <USBD_LL_Reset>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fe74 	bl	800658c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <HAL_PCD_SuspendCallback+0x48>)
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	4a03      	ldr	r2, [pc, #12]	; (80078c0 <HAL_PCD_SuspendCallback+0x48>)
 80078b2:	f043 0306 	orr.w	r3, r3, #6
 80078b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	e000ed00 	.word	0xe000ed00

080078c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078ec:	4b08      	ldr	r3, [pc, #32]	; (8007910 <HAL_PCD_ResumeCallback+0x4c>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	4a07      	ldr	r2, [pc, #28]	; (8007910 <HAL_PCD_ResumeCallback+0x4c>)
 80078f2:	f023 0306 	bic.w	r3, r3, #6
 80078f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80078f8:	f000 fae2 	bl	8007ec0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fe58 	bl	80065b8 <USBD_LL_Resume>
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	e000ed00 	.word	0xe000ed00

08007914 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fea4 	bl	8006678 <USBD_LL_IsoOUTIncomplete>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800794a:	78fa      	ldrb	r2, [r7, #3]
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fe6c 	bl	800662c <USBD_LL_IsoINIncomplete>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe feaa 	bl	80066c4 <USBD_LL_DevConnected>
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fea7 	bl	80066da <USBD_LL_DevDisconnected>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d13c      	bne.n	8007a1e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079a4:	4a20      	ldr	r2, [pc, #128]	; (8007a28 <USBD_LL_Init+0x94>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <USBD_LL_Init+0x94>)
 80079b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079b4:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <USBD_LL_Init+0x94>)
 80079b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80079bc:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <USBD_LL_Init+0x94>)
 80079be:	2206      	movs	r2, #6
 80079c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079c2:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <USBD_LL_Init+0x94>)
 80079c4:	2202      	movs	r2, #2
 80079c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079c8:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <USBD_LL_Init+0x94>)
 80079ca:	2202      	movs	r2, #2
 80079cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <USBD_LL_Init+0x94>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079d4:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <USBD_LL_Init+0x94>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <USBD_LL_Init+0x94>)
 80079dc:	2200      	movs	r2, #0
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <USBD_LL_Init+0x94>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <USBD_LL_Init+0x94>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <USBD_LL_Init+0x94>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079f2:	480d      	ldr	r0, [pc, #52]	; (8007a28 <USBD_LL_Init+0x94>)
 80079f4:	f7f9 fb44 	bl	8001080 <HAL_PCD_Init>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80079fe:	f7f8 fed5 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	4808      	ldr	r0, [pc, #32]	; (8007a28 <USBD_LL_Init+0x94>)
 8007a06:	f7fa fb8e 	bl	8002126 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4806      	ldr	r0, [pc, #24]	; (8007a28 <USBD_LL_Init+0x94>)
 8007a10:	f7fa fb42 	bl	8002098 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	2101      	movs	r1, #1
 8007a18:	4803      	ldr	r0, [pc, #12]	; (8007a28 <USBD_LL_Init+0x94>)
 8007a1a:	f7fa fb3d 	bl	8002098 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000828 	.word	0x20000828

08007a2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7f9 fc40 	bl	80012c8 <HAL_PCD_Start>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d816      	bhi.n	8007a80 <USBD_LL_Start+0x54>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <USBD_LL_Start+0x2c>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007a6f 	.word	0x08007a6f
 8007a60:	08007a75 	.word	0x08007a75
 8007a64:	08007a7b 	.word	0x08007a7b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6c:	e00b      	b.n	8007a86 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	73fb      	strb	r3, [r7, #15]
    break;
 8007a72:	e008      	b.n	8007a86 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	e005      	b.n	8007a86 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7e:	e002      	b.n	8007a86 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	73fb      	strb	r3, [r7, #15]
    break;
 8007a84:	bf00      	nop
  }
  return usb_status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	70fb      	strb	r3, [r7, #3]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70bb      	strb	r3, [r7, #2]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ab8:	78bb      	ldrb	r3, [r7, #2]
 8007aba:	883a      	ldrh	r2, [r7, #0]
 8007abc:	78f9      	ldrb	r1, [r7, #3]
 8007abe:	f7f9 fffb 	bl	8001ab8 <HAL_PCD_EP_Open>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d817      	bhi.n	8007afc <USBD_LL_OpenEP+0x6c>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <USBD_LL_OpenEP+0x44>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007aeb 	.word	0x08007aeb
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007af7 	.word	0x08007af7
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae8:	e00b      	b.n	8007b02 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
    break;
 8007aee:	e008      	b.n	8007b02 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
    break;
 8007af4:	e005      	b.n	8007b02 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	73fb      	strb	r3, [r7, #15]
    break;
 8007afa:	e002      	b.n	8007b02 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	73fb      	strb	r3, [r7, #15]
    break;
 8007b00:	bf00      	nop
  }
  return usb_status;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fa f82c 	bl	8001b88 <HAL_PCD_EP_Close>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d816      	bhi.n	8007b68 <USBD_LL_CloseEP+0x5c>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_LL_CloseEP+0x34>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b57 	.word	0x08007b57
 8007b48:	08007b5d 	.word	0x08007b5d
 8007b4c:	08007b63 	.word	0x08007b63
    case HAL_OK :
      usb_status = USBD_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
    break;
 8007b54:	e00b      	b.n	8007b6e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5a:	e008      	b.n	8007b6e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b60:	e005      	b.n	8007b6e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b62:	2303      	movs	r3, #3
 8007b64:	73fb      	strb	r3, [r7, #15]
    break;
 8007b66:	e002      	b.n	8007b6e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6c:	bf00      	nop
  }
  return usb_status;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fa f8bb 	bl	8001d12 <HAL_PCD_EP_SetStall>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d816      	bhi.n	8007bd4 <USBD_LL_StallEP+0x5c>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_LL_StallEP+0x34>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007bc3 	.word	0x08007bc3
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bcf 	.word	0x08007bcf
    case HAL_OK :
      usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e00b      	b.n	8007bda <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e008      	b.n	8007bda <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	e005      	b.n	8007bda <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e002      	b.n	8007bda <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	bf00      	nop
  }
  return usb_status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa f8e7 	bl	8001dd6 <HAL_PCD_EP_ClrStall>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d816      	bhi.n	8007c40 <USBD_LL_ClearStallEP+0x5c>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBD_LL_ClearStallEP+0x34>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c2f 	.word	0x08007c2f
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c3b 	.word	0x08007c3b
    case HAL_OK :
      usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2c:	e00b      	b.n	8007c46 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	73fb      	strb	r3, [r7, #15]
    break;
 8007c32:	e008      	b.n	8007c46 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c34:	2301      	movs	r3, #1
 8007c36:	73fb      	strb	r3, [r7, #15]
    break;
 8007c38:	e005      	b.n	8007c46 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3e:	e002      	b.n	8007c46 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	bf00      	nop
  }
  return usb_status;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0b      	bge.n	8007c84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	1a9b      	subs	r3, r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	333e      	adds	r3, #62	; 0x3e
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	e00b      	b.n	8007c9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7f9 fed1 	bl	8001a6e <HAL_PCD_SetAddress>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d816      	bhi.n	8007d04 <USBD_LL_SetUSBAddress+0x5c>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBD_LL_SetUSBAddress+0x34>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007cf3 	.word	0x08007cf3
 8007ce4:	08007cf9 	.word	0x08007cf9
 8007ce8:	08007cff 	.word	0x08007cff
    case HAL_OK :
      usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf0:	e00b      	b.n	8007d0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf6:	e008      	b.n	8007d0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfc:	e005      	b.n	8007d0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
    break;
 8007d02:	e002      	b.n	8007d0a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
    break;
 8007d08:	bf00      	nop
  }
  return usb_status;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	460b      	mov	r3, r1
 8007d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d32:	7af9      	ldrb	r1, [r7, #11]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f7f9 ffae 	bl	8001c98 <HAL_PCD_EP_Transmit>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d816      	bhi.n	8007d74 <USBD_LL_Transmit+0x60>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <USBD_LL_Transmit+0x38>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d63 	.word	0x08007d63
 8007d54:	08007d69 	.word	0x08007d69
 8007d58:	08007d6f 	.word	0x08007d6f
    case HAL_OK :
      usb_status = USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d60:	e00b      	b.n	8007d7a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	75fb      	strb	r3, [r7, #23]
    break;
 8007d66:	e008      	b.n	8007d7a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d6c:	e005      	b.n	8007d7a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	75fb      	strb	r3, [r7, #23]
    break;
 8007d72:	e002      	b.n	8007d7a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007d74:	2303      	movs	r3, #3
 8007d76:	75fb      	strb	r3, [r7, #23]
    break;
 8007d78:	bf00      	nop
  }
  return usb_status;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	460b      	mov	r3, r1
 8007d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007da2:	7af9      	ldrb	r1, [r7, #11]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	f7f9 ff38 	bl	8001c1c <HAL_PCD_EP_Receive>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007db0:	7dbb      	ldrb	r3, [r7, #22]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d816      	bhi.n	8007de4 <USBD_LL_PrepareReceive+0x60>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBD_LL_PrepareReceive+0x38>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007dd3 	.word	0x08007dd3
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007ddf 	.word	0x08007ddf
    case HAL_OK :
      usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd0:	e00b      	b.n	8007dea <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd6:	e008      	b.n	8007dea <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
    break;
 8007ddc:	e005      	b.n	8007dea <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	75fb      	strb	r3, [r7, #23]
    break;
 8007de2:	e002      	b.n	8007dea <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	75fb      	strb	r3, [r7, #23]
    break;
 8007de8:	bf00      	nop
  }
  return usb_status;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_PCDEx_LPM_Callback+0x18>
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d01f      	beq.n	8007e4a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e0a:	e03b      	b.n	8007e84 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007e14:	f000 f854 	bl	8007ec0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e18:	4b1c      	ldr	r3, [pc, #112]	; (8007e8c <HAL_PCDEx_LPM_Callback+0x98>)
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	; (8007e8c <HAL_PCDEx_LPM_Callback+0x98>)
 8007e1e:	f023 0306 	bic.w	r3, r3, #6
 8007e22:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e36:	f023 0301 	bic.w	r3, r3, #1
 8007e3a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fbb8 	bl	80065b8 <USBD_LL_Resume>
    break;
 8007e48:	e01c      	b.n	8007e84 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fb8f 	bl	800658c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_PCDEx_LPM_Callback+0x98>)
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <HAL_PCDEx_LPM_Callback+0x98>)
 8007e7c:	f043 0306 	orr.w	r3, r3, #6
 8007e80:	6113      	str	r3, [r2, #16]
    break;
 8007e82:	bf00      	nop
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_static_malloc+0x18>)
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	200001f0 	.word	0x200001f0

08007eac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007ec4:	f7f8 fbac 	bl	8000620 <SystemClock_Config>
}
 8007ec8:	bf00      	nop
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <__errno>:
 8007ecc:	4b01      	ldr	r3, [pc, #4]	; (8007ed4 <__errno+0x8>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000168 	.word	0x20000168

08007ed8 <__libc_init_array>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4d0d      	ldr	r5, [pc, #52]	; (8007f10 <__libc_init_array+0x38>)
 8007edc:	4c0d      	ldr	r4, [pc, #52]	; (8007f14 <__libc_init_array+0x3c>)
 8007ede:	1b64      	subs	r4, r4, r5
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	42a6      	cmp	r6, r4
 8007ee6:	d109      	bne.n	8007efc <__libc_init_array+0x24>
 8007ee8:	4d0b      	ldr	r5, [pc, #44]	; (8007f18 <__libc_init_array+0x40>)
 8007eea:	4c0c      	ldr	r4, [pc, #48]	; (8007f1c <__libc_init_array+0x44>)
 8007eec:	f000 f8ae 	bl	800804c <_init>
 8007ef0:	1b64      	subs	r4, r4, r5
 8007ef2:	10a4      	asrs	r4, r4, #2
 8007ef4:	2600      	movs	r6, #0
 8007ef6:	42a6      	cmp	r6, r4
 8007ef8:	d105      	bne.n	8007f06 <__libc_init_array+0x2e>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f00:	4798      	blx	r3
 8007f02:	3601      	adds	r6, #1
 8007f04:	e7ee      	b.n	8007ee4 <__libc_init_array+0xc>
 8007f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0a:	4798      	blx	r3
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	e7f2      	b.n	8007ef6 <__libc_init_array+0x1e>
 8007f10:	08008204 	.word	0x08008204
 8007f14:	08008204 	.word	0x08008204
 8007f18:	08008204 	.word	0x08008204
 8007f1c:	08008208 	.word	0x08008208

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <_strtol_l.isra.0>:
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f36:	d001      	beq.n	8007f3c <_strtol_l.isra.0+0xc>
 8007f38:	2b24      	cmp	r3, #36	; 0x24
 8007f3a:	d906      	bls.n	8007f4a <_strtol_l.isra.0+0x1a>
 8007f3c:	f7ff ffc6 	bl	8007ecc <__errno>
 8007f40:	2316      	movs	r3, #22
 8007f42:	6003      	str	r3, [r0, #0]
 8007f44:	2000      	movs	r0, #0
 8007f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4a:	4f3a      	ldr	r7, [pc, #232]	; (8008034 <_strtol_l.isra.0+0x104>)
 8007f4c:	468e      	mov	lr, r1
 8007f4e:	4676      	mov	r6, lr
 8007f50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f54:	5de5      	ldrb	r5, [r4, r7]
 8007f56:	f015 0508 	ands.w	r5, r5, #8
 8007f5a:	d1f8      	bne.n	8007f4e <_strtol_l.isra.0+0x1e>
 8007f5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007f5e:	d134      	bne.n	8007fca <_strtol_l.isra.0+0x9a>
 8007f60:	f89e 4000 	ldrb.w	r4, [lr]
 8007f64:	f04f 0801 	mov.w	r8, #1
 8007f68:	f106 0e02 	add.w	lr, r6, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d05c      	beq.n	800802a <_strtol_l.isra.0+0xfa>
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d10c      	bne.n	8007f8e <_strtol_l.isra.0+0x5e>
 8007f74:	2c30      	cmp	r4, #48	; 0x30
 8007f76:	d10a      	bne.n	8007f8e <_strtol_l.isra.0+0x5e>
 8007f78:	f89e 4000 	ldrb.w	r4, [lr]
 8007f7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f80:	2c58      	cmp	r4, #88	; 0x58
 8007f82:	d14d      	bne.n	8008020 <_strtol_l.isra.0+0xf0>
 8007f84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f10e 0e02 	add.w	lr, lr, #2
 8007f8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007f92:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007f96:	2600      	movs	r6, #0
 8007f98:	fbbc f9f3 	udiv	r9, ip, r3
 8007f9c:	4635      	mov	r5, r6
 8007f9e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fa2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fa6:	2f09      	cmp	r7, #9
 8007fa8:	d818      	bhi.n	8007fdc <_strtol_l.isra.0+0xac>
 8007faa:	463c      	mov	r4, r7
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	dd24      	ble.n	8007ffa <_strtol_l.isra.0+0xca>
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	db1f      	blt.n	8007ff4 <_strtol_l.isra.0+0xc4>
 8007fb4:	45a9      	cmp	r9, r5
 8007fb6:	d31d      	bcc.n	8007ff4 <_strtol_l.isra.0+0xc4>
 8007fb8:	d101      	bne.n	8007fbe <_strtol_l.isra.0+0x8e>
 8007fba:	45a2      	cmp	sl, r4
 8007fbc:	db1a      	blt.n	8007ff4 <_strtol_l.isra.0+0xc4>
 8007fbe:	fb05 4503 	mla	r5, r5, r3, r4
 8007fc2:	2601      	movs	r6, #1
 8007fc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007fc8:	e7eb      	b.n	8007fa2 <_strtol_l.isra.0+0x72>
 8007fca:	2c2b      	cmp	r4, #43	; 0x2b
 8007fcc:	bf08      	it	eq
 8007fce:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007fd2:	46a8      	mov	r8, r5
 8007fd4:	bf08      	it	eq
 8007fd6:	f106 0e02 	addeq.w	lr, r6, #2
 8007fda:	e7c7      	b.n	8007f6c <_strtol_l.isra.0+0x3c>
 8007fdc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007fe0:	2f19      	cmp	r7, #25
 8007fe2:	d801      	bhi.n	8007fe8 <_strtol_l.isra.0+0xb8>
 8007fe4:	3c37      	subs	r4, #55	; 0x37
 8007fe6:	e7e1      	b.n	8007fac <_strtol_l.isra.0+0x7c>
 8007fe8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007fec:	2f19      	cmp	r7, #25
 8007fee:	d804      	bhi.n	8007ffa <_strtol_l.isra.0+0xca>
 8007ff0:	3c57      	subs	r4, #87	; 0x57
 8007ff2:	e7db      	b.n	8007fac <_strtol_l.isra.0+0x7c>
 8007ff4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007ff8:	e7e4      	b.n	8007fc4 <_strtol_l.isra.0+0x94>
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	da05      	bge.n	800800a <_strtol_l.isra.0+0xda>
 8007ffe:	2322      	movs	r3, #34	; 0x22
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	4665      	mov	r5, ip
 8008004:	b942      	cbnz	r2, 8008018 <_strtol_l.isra.0+0xe8>
 8008006:	4628      	mov	r0, r5
 8008008:	e79d      	b.n	8007f46 <_strtol_l.isra.0+0x16>
 800800a:	f1b8 0f00 	cmp.w	r8, #0
 800800e:	d000      	beq.n	8008012 <_strtol_l.isra.0+0xe2>
 8008010:	426d      	negs	r5, r5
 8008012:	2a00      	cmp	r2, #0
 8008014:	d0f7      	beq.n	8008006 <_strtol_l.isra.0+0xd6>
 8008016:	b10e      	cbz	r6, 800801c <_strtol_l.isra.0+0xec>
 8008018:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	e7f2      	b.n	8008006 <_strtol_l.isra.0+0xd6>
 8008020:	2430      	movs	r4, #48	; 0x30
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1b3      	bne.n	8007f8e <_strtol_l.isra.0+0x5e>
 8008026:	2308      	movs	r3, #8
 8008028:	e7b1      	b.n	8007f8e <_strtol_l.isra.0+0x5e>
 800802a:	2c30      	cmp	r4, #48	; 0x30
 800802c:	d0a4      	beq.n	8007f78 <_strtol_l.isra.0+0x48>
 800802e:	230a      	movs	r3, #10
 8008030:	e7ad      	b.n	8007f8e <_strtol_l.isra.0+0x5e>
 8008032:	bf00      	nop
 8008034:	080080f9 	.word	0x080080f9

08008038 <strtol>:
 8008038:	4613      	mov	r3, r2
 800803a:	460a      	mov	r2, r1
 800803c:	4601      	mov	r1, r0
 800803e:	4802      	ldr	r0, [pc, #8]	; (8008048 <strtol+0x10>)
 8008040:	6800      	ldr	r0, [r0, #0]
 8008042:	f7ff bf75 	b.w	8007f30 <_strtol_l.isra.0>
 8008046:	bf00      	nop
 8008048:	20000168 	.word	0x20000168

0800804c <_init>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

08008058 <_fini>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	bf00      	nop
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr
